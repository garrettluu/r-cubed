; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_text:
	DS	15
_r:
	DS 4*1
_aa:
	DS 4*1
_bb:
	DS 4*1
_c:
	DS	40
_d:
	DS	3
_e:
	DS	3
	SEGMENT STRSECT
L__0:
	DB	" "
	DB	0
	SEGMENT DATA
_w:
	DW24	L__0
	SEGMENT BSS
_tokens:
	DS	3
_val:
	DS	96
_size:
	DS	3
_OP:
	DS	99
;    1	/*	The AMAZING 3D grapher for the TI84+CE
;    2	 *by gluu
;    3	 *currently in a very early alpha stage
;    4	 *like, i don't even have user input
;    5	 *TODO: Mathematical expression parser
;    6	 *DONE! better way of handling perspective
;    7	 *TODO: possible cylindrical and spherical plots?
;    8	 *
;    9	 *Based on the 3D parametric grapher on desmos
;   10	 *
;   11	 *Please bear with parts of code that are redundant or inefficient.
;   12		I don't care enough to fix them for now.
;   13	 *
;   14	 * I think I fixed all indentation and formatting
;   15	 *	
;   16	 */
;   17	
;   18	
;   19	//headers
;   20	#include <stdbool.h>
;   21	#include <stddef.h>
;   22	#include <stdint.h>
;   23	#include <tice.h>
;   24	
;   25	//std headers
;   26	#include <math.h>
;   27	#include <stdio.h>
;   28	#include <stdlib.h>
;   29	#include <string.h>
;   30	
;   31	
;   32	/* CE Keypad C Library */
;   33	#include <keypadc.h>
;   34	#include <graphx.h>
;   35	#include <fileioc.h>
;   36	
;   37	
;   38	//C is a dumb language 
;   39	//why do i have to define my functions up here and then actually write them all the way down there after i write main()
;   40	//still better than writing assembly code tho
;   41	void printText(const char *text, uint8_t x, uint8_t y);
;   42	
;   43	void fillScreen(uint8_t color);
;   44	
;   45	double x_x(double a, double b, double c);
;   46	
;   47	double x_y(double a, double b, double c);
;   48	
;   49	double y_x(double a, double b, double c);
;   50	
;   51	double y_y(double a, double b, double c);
;   52	
;   53	double z_x(double a, double b, double c);
;   54	
;   55	double z_y(double a, double b, double c);
;   56	
;   57	double function(double x, double y);
;   58	
;   59	double mod(double a, double b);
;   60	
;   61	char *tokenize(char *input);
;   62	
;   63	//global vars
;   64	char text[15];
;   65	float r;
;   66	float aa;
;   67	float bb;
;   68	char c[40];
;   69	char *d;
;   70	char *e, *w = " ";
;   71	char *tokens;
;   72	char *floatToStr(float arg);
;   73	typedef struct node
;   74	{
;   75		double val;
;   76		struct Node* next;
;   77	} node;
;   78	
;   79	double val[24];
;   80	int size;
;   81	
;   82	typedef struct opStack
;   83	{
;   84	    char op[96];
;   85	    int size;
;   86	} opStack;
;   87	opStack OP;
	SEGMENT CODE
;   88	
;   89	void initRPN(void);
;   90	
;   91	void pushRPN(double val);
;   92	
;   93	double popRPN(void);
;   94	
;   95	double parseRPN(char *s, double X, double Y);
;   96	
;   97	void shunt(void);
;   98	
;   99	//main function
;  100	//this is what gets run when the program starts
;  101	void main(void)
;  102	{
_main:
	LD	HL,-3319
	CALL	__frameset
;  103	    //initialize all the keymaps
;  104	    //I don't think all of them get used, but it's nice to have them anyways
;  105	    //feel free to delete the unused ones if you really want to save a few bytes
;  106	    kb_key_t key1;
;  107	    kb_key_t key2;
;  108	    kb_key_t key3;
;  109	    kb_key_t key4;
;  110	    kb_key_t key5;
;  111	    kb_key_t key6;
;  112	    kb_key_t key7;
;  113	
;  114	    //initialize strings
;  115	    const char *graph = "Graphing...";
	LD	BC,L__1
	LD	(IX+-27),BC
;  116	    const char *menuTitle = "Main Menu";
;  117	
;  118	    //declare variables and some constants
;  119	    //uint8_t is the best thing ever
;  120	    //it's basically an unsigned 8bit integer that takes up less space than an int
;  121	    //but functions the same as an int for all intents and purposes (except negatives)
;  122	    int8_t sel = 0; //used for menu selections
;  123	    bool kill = false; //used to terminate program
;  124	    bool firstLoopIsComplete = false; //used to initialize graphx
	LD	(IX+-47),0
;  125	    bool graphingIsComplete = false; //used to plot points
	LD	(IX+-46),0
;  126	    bool lol3 = false; //used to draw the perspective changer
	LD	(IX+-24),0
;  127	    bool main = true;
;  128	    bool keyPressed = false;
;  129	    uint8_t mode = 0; //used for menu selections
;  130	    int i = 0;
;  131	    double t; //parameter for plotting points
;  132	    double a = -2.3; //yaw
	LD	BC,1258291
	LD	(IX+-4),BC
	LD	A,192
	LD	(IX+-1),A
;  133	    double b = .6; //roll
	LD	BC,1677722
	LD	(IX+-8),BC
	LD	A,63
	LD	(IX+-5),A
;  134	    double c = 0; //pitch; this never changes since i don't want people to mess with the rotation of the screen
	LD	BC,0
	LD	(IX+-12),BC
	XOR	A,A
	LD	(IX+-9),A
;  135	    double a1 = a; //dummy variables we'll use later
	LD	BC,1258291
	LD	(IX+-16),BC
	LD	A,192
	LD	(IX+-13),A
;  136	    double b1 = b;
	LD	BC,1677722
	LD	(IX+-20),BC
;  137	    double c1 = c;
;  138	    double g; //g and h are used for calculating the points to plot
;  139	    double _g; //_g and _h are unused for now, keeping it as legacy in case i might need them someday
;  140	    double h;
;  141	    double _h;
;  142	    const double s = 15; //scale of the graph
;  143	    const double s2 = 3.75; //how much of the graph gets shown
;  144	    const double n = 10; //resolution of the grid of the graph is (higher = more detail)
;  145	    double dx = 1 / (n * (1 +
;  146	                          n)); //degree of precision when plotting; higher values mean less precise plotting. This value should be called dt to be mathematically correct, but I don't feel like changing it now
;  147	    double d1;
;  148	    double d2;
;  149	
;  150	    double aaa;
;  151	    char equtest[40] = " x x * y y * - 4 /";
	LD	HL,IX
	LD	A,63
	LD	(IX+-17),A
	LD	BC,-135
	ADD	HL,BC
	LD	DE,HL
	LD	HL,_0temp0
	LD	BC,40
	LDIR	
;  152	    char equ[40] = "x 2 ^ y 2 ^ - .75 *";
	LEA	DE,IX+-95
	LD	HL,_1temp1
	LD	BC,40
	LDIR	
;  153	    char *test = "shrek is love";
;  154	    uint8_t xxNodes[256][3]; //create the node arrays
;  155	    uint8_t xyNodes[256][3]; //why are they multidimensional? this is like 2am code so who knows
;  156	    uint8_t yxNodes[256][3];
;  157	    uint8_t yyNodes[256][3];
;  158	
;  159	
;  160	    //------program actually starts here------\\
;  161	
;  162	    prgm_CleanUp(); //clear the screen
;  163	
;  164	    gfx_Begin(gfx_8bpp); //initialize advanced graphx
	LD	BC,39
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Begin
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  165	    gfx_SetDraw(gfx_buffer);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetDraw
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  166	
;  167	    gfx_SetTextFGColor(gfx_black);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetTextFGColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  168	
;  169	    floatToStr(5);
	LD	C,64
	LD	B,0
	PUSH	BC
	LD	BC,10485760
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floatToStr
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  170	
;  171	    //testing purposes
;  172	//    for (t = 0; t < 1 && kb_Data[kb_group_1] != kb_2nd; t += .1)
;  173	//    for(tokens = strtok(equtest, " "); tokens != NULL; tokens = strtok(NULL," "))
;  174	//    {
;  175	//    	g = 2*strtod(tokens,&e);
;  176	//    	h = 8;
;  177	//    	floatToStr(g);
;  178	//    	if (e > tokens && *tokens != '+') gfx_PrintStringXY(text, 12, 21 + (9 * i));
;  179	////    	floatToStr(parseRPN(equ,g,h));
;  180	//    	gfx_PrintStringXY(tokens, 150, 21 + (9 * i));
;  181	//    	i++;
;  182	//    }
;  183	
;  184	
;  185	
;  186	    gfx_PrintStringXY("R3 - 3D grapher for the TI84PCE ", 12, 12); //print title text
	LD	BC,12
	PUSH	BC
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
;  187	//    gfx_PrintStringXY(text, 12, 21);
;  188	
;  189	//    gfx_PrintStringXY(text, 12, 30);
;  190	
;  191	    gfx_SwapDraw(); //update the screen
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  192	
;  193	
;  194	    while (!os_GetCSC()); //wait for input
L_3:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	OR	A,A
	JR	Z,L_3
;  195	    gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillScreen
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
;  196	    gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  197	
;  198	    prgm_CleanUp(); //clear the screen
;  199	//
;  200	//    do
;  201	//    {
;  202	//    	boot_WaitShort();
;  203	//    	kb_Scan();
;  204	//    	if (sel > 1) sel = 1;
;  205	//    	else if (sel < 0) sel = 0;
;  206	//    	if (!firstLoopIsComplete)
;  207	//    	{
;  208	//    		gfx_SetDraw(gfx_buffer);
;  209	//    		gfx_FillScreen(gfx_white);
;  210	//    		gfx_PrintStringXY(menuTitle, 160-gfx_GetStringWidth(menuTitle),12);
;  211	//    		gfx_PrintStringXY("1. Enter equation ", 12, 21);
;  212	//    		gfx_PrintStringXY("2. Graph", 12, 30);
;  213	//    		gfx_PrintStringXY("*",4,21+(sel*9));
;  214	//    		gfx_SwapDraw();
;  215	//    		firstLoopIsComplete = true;
;  216	//    	}
;  217	//
;  218	//    	key7 = kb_Data[kb_group_7]; //load the group 7 registers
;  219	//    	switch(key7)
;  220	//    	{
;  221	//    		case kb_Up:
;  222	//    			--sel;
;  223	//    			if (sel > 1) sel = 1;
;  224	//    			    	else if (sel < 0) sel = 0;
;  225	//    			firstLoopIsComplete = false;
;  226	//    			keyPressed = true;
;  227	//    			key7 = kb_Left;
;  228	//    			break;
;  229	//    		case kb_Down:
;  230	//    			++sel;
;  231	//    			if (sel > 1) sel = 1;
;  232	//    			    	else if (sel < 0) sel = 0;
;  233	//    			gfx_SwapDraw();
;  234	//    			firstLoopIsComplete = false;
;  235	//    			key7 = kb_Left;
;  236	//				break;
;  237	//    		default:
;  238	//    			break;
;  239	//    	}
;  240	//    	if (key6 == kb_Enter && main)
;  241	//    	{
;  242	//    		main = false;
;  243	//    		if (sel == 0)
;  244	//    		{
;  245	//    			kill = true;
;  246	//    		}
;  247	//    		else if (sel == 1)
;  248	//    		{
;  249	//
;  250	//    		}
;  251	//    	}
;  252	//    	if (sel > 1) sel = 1;
;  253	//    	else if (sel < 0) sel = 0;
;  254	//
;  255	//    }
;  256	//    while(main && kb_Data[kb_group_1] != kb_2nd);
;  257	    do
L_30:
;  258	    {
;  259	        //THIS IS WHERE THE FUN BEGINS
;  260	        if (!firstLoopIsComplete)
	LD	A,(IX+-47)
	OR	A,A
	JR	NZ,L_6
;  261	        {
;  262	            i = 0;
;  263	            //the stuff here will only happen the first time this loop is run
;  264	            gfx_FillScreen(gfx_white); //fill the screen with white
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillScreen
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  265	            gfx_PrintStringXY(graph, 320 - gfx_GetStringWidth(graph), 230);
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  266	            gfx_BlitRectangle(gfx_buffer, 320 - gfx_GetStringWidth(graph), 230, gfx_GetStringWidth(graph), 10);
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_BlitRectangle
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  267	            firstLoopIsComplete = true; //make sure these aren't run again
	LD	(IX+-47),1
;  268	        }
L_6:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
;  269	        kb_Scan(); //scan the keyboard for inputs
	CALL	_kb_Scan
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  270	        key7 = kb_Data[kb_group_7]; //load the group 7 registers
	LD	A,(16056350)
	LD	(IX+-49),A
;  271	        gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  272	        switch (key7)
	LD	A,(IX+-49)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__6:
	LD	DE,8
	OR	A,A
	SBC	HL,DE
	JR	Z,L_7
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L_12
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	C,L_12
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_12
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,L__5-3
	ADD	HL,BC
	LD	HL,(HL)
	JP	(HL)
L__5:
	DW24	L_8	

	DW24	L_9	

	DW24	L_12	

	DW24	L_10	

;  273	        {
;  274	            //this is for controlling perspective, but the ez80 is a crappy 48mHz cpu and can't do this in real time
;  275	            //(well it can, but it has to redraw the function every freakin' time)
;  276	            case kb_Up:
L_7:
;  277	                //	gfx_FillScreen( gfx_white); //every time this happens, we want to clear the screen before drawing stuff again
;  278	                gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  279	                gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  280	                b1 += .15;
	LD	BC,(IX+-20)
	LD	A,(IX+-17)
	LD	HL,1677722
	LD	E,62
	CALL	__fadd
	LD	(IX+-20),BC
	LD	(IX+-17),A
;  281	                lol3 = false; //this is so that it redraws the function
	LD	(IX+-24),0
;  282	                break;
	JR	L_12
;  283	            case kb_Down:
L_8:
;  284	                gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  285	                gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  286	                b1 -= .15;
	LD	BC,(IX+-20)
	LD	A,(IX+-17)
	LD	HL,1677722
	LD	E,62
	CALL	__fsub
	LD	(IX+-20),BC
	LD	(IX+-17),A
;  287	                lol3 = false; //i honestly should name my variables more intuitively so you can actually understand what they do
	LD	(IX+-24),0
;  288	                break;
	JR	L_12
;  289	            case kb_Left:
L_9:
;  290	                gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  291	                gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  292	                a1 += .15;
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	LD	HL,1677722
	LD	E,62
	CALL	__fadd
	LD	(IX+-16),BC
	LD	(IX+-13),A
;  293	                lol3 = false;
	LD	(IX+-24),0
;  294	                break;
	JR	L_12
;  295	            case kb_Right:
L_10:
;  296	                gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  297	                gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  298	                a1 -= .15;
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	LD	HL,1677722
	LD	E,62
	CALL	__fsub
	LD	(IX+-16),BC
	LD	(IX+-13),A
;  299	                lol3 = false;
	LD	(IX+-24),0
;  300	                break;
;  301	            default:
;  302	                break;
;  303	        }
L_12:
;  304	        //The perspective box
;  305	        //This is my solution to controlling perspective, since we can't rotate in real time
;  306	        //rotate the preview axes to desired position and press enter, and the function will redraw itself
;  307	        gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  308	        gfx_VertLine_NoClip(320 - 64, 0, 64); //borders for box
	LD	BC,64
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_VertLine_NoClip
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  309	        gfx_HorizLine_NoClip(320 - 64, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_HorizLine_NoClip
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  310	        //x-axis
;  311	        gfx_Line_NoClip(288 - (x_x(a1, b1, c1) * 24), 32 + (x_y(a1, b1, c1) * 24), (int) (288 + (x_x(a1, b1, c1) * 24)),
;  312	                        (int) (32 - (x_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  313	        gfx_PrintStringXY("x", (int) (288 + (x_x(a1, b1, c1) * 25)), (int) (32 - (x_y(a1, b1, c1) * 25))); //axis labels
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  314	        //y-axis
;  315	        gfx_Line_NoClip(288 - (y_x(a1, b1, c1) * 24), 32 + (y_y(a1, b1, c1) * 24), (int) (288 + (y_x(a1, b1, c1) * 24)),
;  316	                        (int) (32 - (y_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  317	        gfx_PrintStringXY("y", (int) (288 + (y_x(a1, b1, c1) * 25)), (int) (32 - (y_y(a1, b1, c1) * 25)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  318	        //z-axis
;  319	        gfx_Line_NoClip(288 - (z_x(a1, b1, c1) * 24), 32 + (z_y(a1, b1, c1) * 24), (int) (288 + (z_x(a1, b1, c1) * 24)),
;  320	                        (int) (32 - (z_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  321	        gfx_PrintStringXY("z", (int) (288 + (z_x(a1, b1, c1) * 25)), (int) (32 - (z_y(a1, b1, c1) * 25)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  322	        if (!lol3)
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_15
;  323	        {
;  324	            gfx_BlitRectangle(gfx_buffer, 320 - 64, 0, 64,
;  325	                              65); //blit the corner; take from the buffer and draw it on screen
	LD	BC,65
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_BlitRectangle
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  326	            lol3 = true; //we don't want this to keep running
	LD	(IX+-24),1
;  327	        }
L_15:
;  328	        if (kb_Data[kb_group_6] == kb_Enter)
	LD	A,(16056348)
	CP	A,1
	JR	NZ,L_28
;  329	        {
;  330	            gfx_PrintStringXY(graph, 320 - gfx_GetStringWidth(graph), 230);
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  331	            gfx_BlitRectangle(gfx_buffer, 320 - gfx_GetStringWidth(graph), 230, gfx_GetStringWidth(graph), 10);
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_BlitRectangle
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  332	            a = a1;
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  333	            b = b1;
	LD	BC,(IX+-20)
	LD	A,(IX+-17)
	LD	(IX+-8),BC
	LD	(IX+-5),A
;  334	            c = c1;
	LD	BC,0
	LD	(IX+-12),BC
	XOR	A,A
	LD	(IX+-9),A
;  335	            graphingIsComplete = false;
	LD	(IX+-46),0
;  336	        }
L_28:
;  337	
;  338	
;  339	        if (!graphingIsComplete)
	LD	A,(IX+-46)
	OR	A,A
	JR	NZ,L_31
;  340	        {
;  341	            //basically, this is the for-loop that controls graphing
;  342	            //initial condition: t=0
;  343	            //go until t is greater than one
;  344	            //add dx to t each time
;  345	            gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillScreen
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  346	            gfx_SetColor(gfx_black); //we want to draw in black
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  347	            //x-axis
;  348	            //apparently the _NoClip functions are faster than their clipped counterparts
;  349	            gfx_Line_NoClip(160 - (x_x(a, b, c) * 100), 120 + (x_y(a, b, c) * 100), (int) (160 + (x_x(a, b, c) * 100)),
;  350	                            (int) (120 - (x_y(a, b, c) *
;  351	                                          100))); //we're casting doubles to ints here, but i think that is redundant since gfx_Line converts doubles automatically
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  352	            gfx_PrintStringXY("x", (int) (160 + (x_x(a, b, c) * 100)),
;  353	                              (int) (120 - (x_y(a, b, c) * 100))); //axis labels, according to the right-hand rule
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  354	            //y-axis
;  355	            gfx_Line_NoClip(160 - (y_x(a, b, c) * 100), 120 + (y_y(a, b, c) * 100), (int) (160 + (y_x(a, b, c) * 100)),
;  356	                            (int) (120 - (y_y(a, b, c) *
;  357	                                          100))); //btw (160,120) is the center of the screen, counting from the top left corner as (0,0)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  358	            gfx_PrintStringXY("y", (int) (160 + (y_x(a, b, c) * 100)), (int) (120 - (y_y(a, b, c) * 100)));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__18
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  359	            //z-axis
;  360	            gfx_Line_NoClip(160 - (z_x(a, b, c) * 100), 120 + (z_y(a, b, c) * 100), (int) (160 + (z_x(a, b, c) * 100)),
;  361	                            (int) (120 - (z_y(a, b, c) * 100))); //the resolution of the TI84+CE is 320*240
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  362	            gfx_PrintStringXY("z", (int) (160 + (z_x(a, b, c) * 100)), (int) (120 - (z_y(a, b, c) * 100)));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__19
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  363	            i = 0;
	LD	BC,0
	LD	(IX+-23),BC
;  364	            for (t = 0; t < 1 && kb_Data[kb_group_1] != kb_2nd; t += .00909)
	LD	(IX+-39),BC
	XOR	A,A
	LD	(IX+-36),A
	JR	L_25
L_23:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
;  365	            {
;  366	                kb_Scan(); //keep scanning for key presses
	CALL	_kb_Scan
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  367	                gfx_SetColor(gfx_green); //we want to graph in green
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  368	                //equations for the grid/graph
;  369	                g = 2 * s2 * ((floor(t * (n + 1)) / n) - .5);
	LD	BC,(IX+-39)
	LD	A,(IX+-36)
	LD	HL,3145728
	LD	E,65
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,2097152
	LD	E,65
	CALL	__fdiv
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-31),BC
	LD	(IX+-28),A
;  370	                h = 2 * s2 * (mod(t * (n + 1), 1) - .5);
	LD	C,63
	LD	B,0
	PUSH	BC
	LD	HL,3145728
	LD	E,65
	LD	BC,8388608
	PUSH	BC
	LD	BC,(IX+-39)
	LD	A,(IX+-36)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mod
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-35),BC
	LD	(IX+-32),A
;  371	                //	_g = 2*s2*((floor((t+dx)*(n+1))/n)-.5); //unused for now
;  372	                //	_h = 2*s2*(mod((t+dx)*(n+1),1)-.5); //unused for now
;  373	
;  374	
;  375	
;  376	                xxNodes[i][0] = (uint8_t)(160 + (s * ((x_x(a, b, c) * g) + (y_x(a, b, c) * h) +
;  377	                                                      (z_x(a, b, c) * parseRPN(equ,g, h) * .25)))); //fill out the arrays of nodes
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	E,(IX+-28)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-3311	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3312	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-35)
	LD	E,(IX+-32)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3311	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-3312	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-3307	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-32)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	LD	C,(IX+-28)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	PEA	IX+-95
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3308	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	LD	BC,-3304	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3316
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3316
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3304	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	CALL	__fmul
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3307	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-3308	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	LD	HL,(IX+-23)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-23)
	SBC	HL,DE
	LD	DE,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-3298	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-903
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3301	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3298	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-3298	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3301	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3298	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),C
;  378	                xyNodes[i][0] = (uint8_t)(
;  379	                        120 - (s * ((x_y(a, b, c) * g) + (y_y(a, b, c) * h) + (z_y(a, b, c) * parseRPN(equ,g, h) * .25))));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	E,(IX+-28)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-3294	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3295	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-35)
	LD	E,(IX+-32)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3294	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-3295	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-3290	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-32)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	LD	C,(IX+-28)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	PEA	IX+-95
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3291	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	LD	BC,-3287	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3316
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3316
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3287	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	CALL	__fmul
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3290	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-3291	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	HL,(IX+-23)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-23)
	SBC	HL,DE
	LD	DE,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-3281	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-1671
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3284	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3281	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-3281	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3284	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3281	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),C
;  380	                yxNodes[i][0] = (uint8_t)(
;  381	                        160 + (s * ((x_x(a, b, c) * h) + (y_x(a, b, c) * g) + (z_x(a, b, c) * parseRPN(equ,h, g) * .25))));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-35)
	LD	E,(IX+-32)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-3277	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3278	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	E,(IX+-28)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3277	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-3278	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-3273	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-28)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	LD	C,(IX+-32)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	PEA	IX+-95
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3274	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	LD	BC,-3270	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3316
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_x
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3316
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3270	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	CALL	__fmul
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3273	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-3274	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	LD	HL,(IX+-23)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-23)
	SBC	HL,DE
	LD	DE,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-3264	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-2439
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3267	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3264	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-3264	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3267	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3264	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),C
;  382	                yyNodes[i][0] = (uint8_t)(
;  383	                        120 - (s * ((x_y(a, b, c) * h) + (y_y(a, b, c) * g) + (z_y(a, b, c) * parseRPN(equ,h, g) * .25))));
	LD	HL,(IX+-23)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-23)
	SBC	HL,BC
	LD	(IX+-42),HL
	LD	(IX+-55),HL
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-35)
	LD	E,(IX+-32)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-3260	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3261	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	E,(IX+-28)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3260	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-3261	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-3255	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-28)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	LD	C,(IX+-32)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	PEA	IX+-95
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3257	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3318
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3319
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_y
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	LD	BC,-3318
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3319
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	CALL	__fmul
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3252	; spill
	CALL	__istix
	LD	BC,-3255	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3252	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	LD	IY,-3257	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	PUSH	BC
	LD	IY,-3256	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
;  384	
;  385	
;  386	
;  387	                //testing purposes
;  388	//                xxNodes[i][0] = (uint8_t)(160 + (s * ((x_x(a, b, c) * g) + (y_x(a, b, c) * h) +
;  389	//                                                      (z_x(a, b, c) * function(g, h))))); //fill out the arrays of nodes
;  390	//                xyNodes[i][0] = (uint8_t)(
;  391	//                        120 - (s * ((x_y(a, b, c) * g) + (y_y(a, b, c) * h) + (z_y(a, b, c) * function( g, h)))));
;  392	//                yxNodes[i][0] = (uint8_t)(
;  393	//                        160 + (s * ((x_x(a, b, c) * h) + (y_x(a, b, c) * g) + (z_x(a, b, c) *function( h, g)))));
;  394	//                yyNodes[i][0] = (uint8_t)(
;  395	//                        120 - (s * ((x_y(a, b, c) * h) + (y_y(a, b, c) * g) + (z_y(a, b, c) * function( h, g)))));
;  396	
;  397	
;  398	                if (i >= 12) //for some reason the first 12 nodes don't connect to the rest, so we omit them
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3240	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,12
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3243	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3240	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	CALL	__ftol
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,(IX+-42)
	LD	BC,-3246	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-3207
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3249	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3246	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-3246	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3249	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3246	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),C
	LD	HL,(IX+-23)
	OR	A,A
	LD	BC,-3243	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	SBC	HL,BC
	JP	M,L_22
;  399	                {
;  400	                    if ((i - 1) % (int) (n) != 0) // we don't want to connect the nodes that are on opposite sides
	LD	BC,(IX+-23)
	DEC	BC
	LD	(IX+-45),BC
	LD	(IX+-52),BC
	LD	HL,BC
	LD	BC,10
	CALL	__irems
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	NZ,L__22
	LD	A,1
	JR	L__23
L__22:
	XOR	A,A
L__23:
	LD	(IX+-48),A
	OR	A,A
	JR	NZ,L_18
;  401	                    {
;  402	                        gfx_Line(xxNodes[i - 1][0], xyNodes[i - 1][0], xxNodes[i][0],
;  403	                                 xyNodes[i][0]); //connect the nodes
	LD	BC,(IX+-42)
	LD	(IX+-55),BC
	LD	BC,(IX+-45)
	LD	(IX+-52),BC
	LD	HL,(IX+-45)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-45)
	SBC	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-1671
	ADD	HL,DE
	LD	DE,(IX+-42)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	DE,-903
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,DE
	LD	DE,(IX+-42)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	DE,-1671
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-3234	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,BC
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3237	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3234	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3237	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	DE,-903
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,DE
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  404	                    }
L_18:
;  405	                    gfx_SetColor(gfx_blue); //we want graph in blue
	LD	BC,16
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  406	                    if ((i - 1) % (int) (n) != 0)
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_22
;  407	                    { //do the same thing
;  408	                        gfx_Line(yxNodes[i - 1][0], yyNodes[i - 1][0], yxNodes[i][0], yyNodes[i][0]);
	LD	BC,(IX+-52)
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	DE,HL
	LD	HL,IX
	LD	BC,(IX+-55)
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3210	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3207
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3213	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3210	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3210	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3213	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-3210	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3216	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3219	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3216	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3216	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3219	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-3216	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	A,(HL)
	UEXT	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3222	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-2439
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3225	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3222	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3228	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3231	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3228	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	L,A
	PUSH	HL
	LD	HL,IX
	LD	BC,-3225	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-3231	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	BC,-3207
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	BC,-2439
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  409	                    }
;  410	                }
L_22:
;  411	                i++; //increment i
	LD	BC,(IX+-23)
	INC	BC
	LD	(IX+-23),BC
;  412	                g = 2 * s2 * ((floor(t * (n + 1)) / n) - .5);
	LD	BC,(IX+-39)
	LD	A,(IX+-36)
	LD	HL,3145728
	LD	E,65
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,2097152
	LD	E,65
	CALL	__fdiv
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-31),BC
	LD	(IX+-28),A
;  413	                h = 2 * s2 * (mod(t * (n + 1), 1) - .5);
	LD	C,63
	LD	B,0
	PUSH	BC
	LD	HL,3145728
	LD	E,65
	LD	BC,8388608
	PUSH	BC
	LD	BC,(IX+-39)
	LD	A,(IX+-36)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mod
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-35),BC
	LD	(IX+-32),A
	LD	BC,(IX+-39)
	LD	A,(IX+-36)
	LD	HL,1371705
	LD	E,60
	CALL	__fadd
	LD	(IX+-39),BC
	LD	(IX+-36),A
;  414	                //really inefficient pixel plotter. slow af
;  415	                //use this at your own risk
;  416	                //	gfx_SetPixel( 160 + (s*((x_x(a,b,c)*g)+(y_x(a,b,c)*h)+(z_x(a,b,c)*function(g,h)))) ,   120-(s*((x_y(a,b,c)*g) + (y_y(a,b,c)*h) + (z_y(a,b,c)*function(g,h)))));
;  417	                //	gfx_SetColor(gfx_blue);
;  418	                //	gfx_SetPixel(160+(s*((x_x(a,b,c)*h)+(y_x(a,b,c)*g)+(z_x(a,b,c)*function(h,g)))),120-(s*((x_y(a,b,c)*h) + (y_y(a,b,c)*g) + (z_y(a,b,c)*function(h,g)))));
;  419	
;  420	            }
L_25:
	LD	HL,(IX+-39)
	LD	E,(IX+-36)
	LD	BC,8388608
	LD	A,63
	CALL	__fcmp
	JP	P,L_26
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_23
L_26:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3315
	CALL	__istix
	POP	HL
	POP	BC
;  421	            gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-3315
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  422	            graphingIsComplete = true; // this is so that it only plots the function once
	LD	(IX+-46),1
;  423	            lol3 = false;
	LD	(IX+-24),0
;  424	        }
;  425	
;  426	    } while (!kill && kb_Data[kb_group_1] != kb_2nd);
L_31:
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_30
;  427	    gfx_End(); //stop the gfx
	CALL	_gfx_End
;  428	    prgm_CleanUp(); //clear the screen
;  429	    //end of program
;  430	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_parseRPN                           IMPORT  -----   function
;_mod                                IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_z_x                                IMPORT  -----   function
;_z_y                                IMPORT  -----   function
;_y_x                                IMPORT  -----   function
;_y_y                                IMPORT  -----   function
;_x_x                                IMPORT  -----   function
;_x_y                                IMPORT  -----   function
;_gfx_Line_NoClip                    IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_VertLine_NoClip                IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_BlitRectangle                  IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_floatToStr                         IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_1temp1                             STATIC     40   variable
;_0temp0                             STATIC     40   variable
;yyNodes                            IX-3207    768   variable
;yxNodes                            IX-2439    768   variable
;xyNodes                            IX-1671    768   variable
;xxNodes                             IX-903    768   variable
;equtest                             IX-135     40   variable
;equ                                  IX-95     40   variable
;G_3                                  IX-55      3   variable
;G_4                                  IX-52      3   variable
;key7                                 IX-49      1   variable
;G_2                                  IX-48      1   variable
;firstLoopIsComplete                  IX-47      1   variable
;graphingIsComplete                   IX-46      1   variable
;G_1                                  IX-45      3   variable
;G_0                                  IX-42      3   variable
;t                                    IX-39      4   variable
;h                                    IX-35      4   variable
;g                                    IX-31      4   variable
;graph                                IX-27      3   variable
;lol3                                 IX-24      1   variable
;i                                    IX-23      3   variable
;b1                                   IX-20      4   variable
;a1                                   IX-16      4   variable
;c                                    IX-12      4   variable
;b                                     IX-8      4   variable
;a                                     IX-4      4   variable


; Stack Frame Size: 3325 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"Graphing..."
	DB	0
L__2:
	DB	"R3 - 3D grapher for the TI84PCE "
	DB	0
L__11:
	DB	"x"
	DB	0
L__12:
	DB	"y"
	DB	0
L__13:
	DB	"z"
	DB	0
L__17:
	DB	"x"
	DB	0
L__18:
	DB	"y"
	DB	0
L__19:
	DB	"z"
	DB	0
	SEGMENT TEXT
_0temp0:
	DB	32
	DB	120
	DB	32
	DB	120
	DB	32
	DB	42
	DB	32
	DB	121
	DB	32
	DB	121
	DB	32
	DB	42
	DB	32
	DB	45
	DB	32
	DB	52
	DB	32
	DB	47
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_1temp1:
	DB	120
	DB	32
	DB	50
	DB	32
	DB	94
	DB	32
	DB	121
	DB	32
	DB	50
	DB	32
	DB	94
	DB	32
	DB	45
	DB	32
	DB	46
	DB	55
	DB	53
	DB	32
	DB	42
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;  431	
;  432	//function that prints simple text on screen
;  433	//similar to the Output() function of TI-BASIC
;  434	void printText(const char *text, uint8_t xpos, uint8_t ypos)
;  435	{
_printText:
	CALL	__frameset0
;  436	    os_SetCursorPos(ypos, xpos); //set the place to start putting text
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;  437	    os_PutStrFull(text); //output the string
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  438	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  439	
;  440	/* Simple way to fill the screen with a given color */
;  441	void fillScreen(uint8_t color)
;  442	{
_fillScreen:
	CALL	__frameset0
;  443	    memset_fast(lcd_Ram, color, LCD_SIZE);
	LD	BC,153600
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,13893632
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  444	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fillScreen ***************************
;Name                         Addr/Register   Size   Type
;_memset                             IMPORT  -----   function
;color                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  445	
;  446	//used to calculate the position of points in the 3d world and translate them into 2d coordinates to draw onto the screen
;  447	//when using these, ALWAYS type (a,b,c) as the arguments of the function.
;  448	double x_x(double a, double b, double c)
;  449	{
_x_x:
	LD	HL,-11
	CALL	__frameset
;  450	    return (cos(c) * cos(a)) - (sin(c) * sin(a) * sin(b));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-4),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-1),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-7)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-1)
	LD	HL,BC
	LD	BC,(IX+-4)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  451	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _x_x ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: 0 (instruction)


;  452	
;  453	double x_y(double a, double b, double c)
;  454	{
_x_y:
	LD	HL,-11
	CALL	__frameset
;  455	    return (cos(c) * sin(a) * sin(b)) + (sin(c) * cos(a));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fadd
	LD	E,A
	LD	HL,BC
;  456	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _x_y ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: 0 (instruction)


;  457	
;  458	double y_x(double a, double b, double c)
;  459	{
_y_x:
	LD	HL,-14
	CALL	__frameset
;  460	    return (-1 * cos(c) * sin(a)) - (sin(c) * cos(a) * sin(b));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	B,A
	LD	(IX+-13),BC
	CALL	_sin
	LD	BC,(IX+-13)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-13),BC
	LD	(IX+-14),A
	CALL	_cos
	LD	BC,(IX+-13)
	LD	A,(IX+-14)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-10),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-13),BC
	CALL	_sin
	LD	BC,(IX+-13)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-10)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  461	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _y_x ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: 0 (instruction)


;  462	
;  463	double y_y(double a, double b, double c)
;  464	{
_y_y:
	LD	HL,-11
	CALL	__frameset
;  465	    return (cos(c) * cos(a) * sin(b)) - (sin(c) * sin(a));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  466	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _y_y ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: 0 (instruction)


;  467	
;  468	double z_x(double a, double b, double c)
;  469	{
_z_x:
	LD	HL,-6
	CALL	__frameset
;  470	    return -1 * sin(c) * cos(b);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_sin
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-6),BC
	CALL	_cos
	LD	BC,(IX+-6)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
;  471	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _z_x ***************************
;Name                         Addr/Register   Size   Type
;_cos                                IMPORT  -----   function
;_sin                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


;  472	
;  473	double z_y(double a, double b, double c)
;  474	{
_z_y:
	LD	HL,-4
	CALL	__frameset
;  475	    return cos(c) * cos(b);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-3),BC
	LD	(IX+-4),A
	CALL	_cos
	LD	BC,(IX+-3)
	LD	A,(IX+-4)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	HL,BC
;  476	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _z_y ***************************
;Name                         Addr/Register   Size   Type
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: 0 (instruction)


;  477	
;  478	//the 3d function you want to graph
;  479	//note that this is in the format f(x,y)=
;  480	//for example: for f(x,y)=cos(xy)-y^2, type in
;  481	//	return cos(x*y)-(pow(y,2));
;  482	//soon i should have user input
;  483	double function(double x, double y)
;  484	{
_function:
	CALL	__frameset0
;  485	    return x-y;
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  486	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _function ***************************
;Name                         Addr/Register   Size   Type
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  487	
;  488	//proper modulus function
;  489	//the % operator only works with integers
;  490	//and the fmod() function can't handle negative numbers properly
;  491	double mod(double a, double N)
;  492	{
_mod:
	CALL	__frameset0
;  493	    return a - N * floor(a / N);
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  494	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mod ***************************
;Name                         Addr/Register   Size   Type
;_floor                              IMPORT  -----   function
;N                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  495	
;  496	char *tokenize(char *input)
;  497	{
_tokenize:
	LD	HL,-3
	CALL	__frameset
;  498	    int i = 0;
;  499	    char *output;
;  500	    output = strtok(input, ",");
	LD	BC,L__40
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;  501	    return output;
;  502	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _tokenize ***************************
;Name                         Addr/Register   Size   Type
;_strtok                             IMPORT  -----   function
;output                                IX-3      3   variable
;input                                 IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__40:
	DB	","
	DB	0
	SEGMENT CODE
;  503	
;  504	char *floatToStr(float arg)
;  505	{
_floatToStr:
	LD	HL,-18
	CALL	__frameset
;  506	    const real_t arg2 = os_FloatToReal(arg);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-18
	CALL	_os_FloatToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-9
;  507	    os_RealToStr(text, &arg2, -1, 1, -1);
	LD	BC,16777215
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	PEA	IX+-9
	LD	BC,_text
	PUSH	BC
	LD	BC,9
	LDIR	
	CALL	_os_RealToStr
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  508	    return text;
	LD	HL,_text
;  509	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _floatToStr ***************************
;Name                         Addr/Register   Size   Type
;_text                               STATIC     15   variable
;_os_RealToStr                       IMPORT  -----   function
;_os_FloatToReal                     IMPORT  -----   function
;arg2                                  IX-9      9   variable
;arg                                   IX+6      4   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


;  510	float strToFloat(char *arg, char *end)
;  511	{
_strToFloat:
	LD	HL,-18
	CALL	__frameset
;  512		const real_t arg2 = os_StrToReal(arg,&end);
	PEA	IX+9
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-18
	CALL	_os_StrToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-9
;  513		return os_RealToFloat(&arg2);
	PEA	IX+-9
	LD	BC,9
	LDIR	
	CALL	_os_RealToFloat
	POP	BC
;  514	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _strToFloat ***************************
;Name                         Addr/Register   Size   Type
;_os_RealToFloat                     IMPORT  -----   function
;_os_StrToReal                       IMPORT  -----   function
;arg2                                  IX-9      9   variable
;end                                   IX+9      3   parameter
;arg                                   IX+6      3   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


;  515	//sets the size of the stack to 0
;  516	void initRPN()
;  517	{
_initRPN:
;  518	    size = 0;
	LD	BC,0
	LD	(_size),BC
;  519	}
	RET	


;**************************** _initRPN ***************************
;Name                         Addr/Register   Size   Type
;_size                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  520	//pushes the argument to the stack
;  521	void pushRPN(double v)
;  522	{
_pushRPN:
	CALL	__frameset0
;  523	    val[size++] = v;
	LD	HL,(_size)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_val
	ADD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	LD	BC,(_size)
	INC	BC
	LD	(_size),BC
;  524	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pushRPN ***************************
;Name                         Addr/Register   Size   Type
;_size                               STATIC      3   variable
;_val                                STATIC     96   variable
;v                                     IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  525	//returns the value of the element on top of the stack and removes it
;  526	double popRPN(void)
;  527	{
_popRPN:
;  528	    return val[--size];
	LD	BC,(_size)
	DEC	BC
	LD	(_size),BC
	LD	HL,(_size)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_val
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
;  529	}
	RET	


;**************************** _popRPN ***************************
;Name                         Addr/Register   Size   Type
;_val                                STATIC     96   variable
;_size                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  530	//THIS FINALLY WORKS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
;  531	double parseRPN(char *s, double X, double Y) //THE REVERSE POLISH NOTATION PARSER IS HERE
;  532	{
_parseRPN:
	LD	HL,-8
	CALL	__frameset
;  533	    double a, b; //declare my vars
;  534	    initRPN(); //set stack size to 0;
	CALL	_initRPN
;  535	    strcpy(c,s); //copy the string s to c, so we can mess with c all we want without damaging s
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,_c
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  536	    for(tokens = strtok(c,w); tokens != NULL; tokens = strtok(NULL,w)) //chop c into tokens, separated by spaces as delims
	LD	BC,(_w)
	PUSH	BC
	LD	BC,_c
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(_tokens),HL
	JR	L_75
L_73:
;  537	    {
;  538	    	//for each token we will:
;  539	    	a = strtod(tokens,&e); //convert it to a number and store it in a
	LD	BC,_e
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strtod
	POP	BC
	POP	BC
	LD	(IX+-4),HL
	LD	(IX+-1),E
;  540	        if (e > tokens && *tokens != '+' && *tokens != '-' && *tokens != '/' && *tokens != '*' && *tokens != '^' && *tokens != 'x' && *tokens != 'y' ) //stupid
	LD	BC,(_e)
	LD	HL,(_tokens)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_72
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,43
	SBC	HL,BC
	JR	Z,L_72
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,45
	SBC	HL,BC
	JR	Z,L_72
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JR	Z,L_72
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,42
	SBC	HL,BC
	JR	Z,L_72
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,94
	SBC	HL,BC
	JR	Z,L_72
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	JR	Z,L_72
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,121
	SBC	HL,BC
	JR	Z,L_72
;  541	        {
;  542	        	pushRPN(a); //push a to the stack if the token was an actual number
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  543	        }
;  544	        else if (*tokens == 'x')
	JR	L_74
L_72:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	JR	NZ,L_70
;  545	        {
;  546	        	pushRPN(X); //push the value of argument X to stack
	LD	C,(IX+12)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  547	        }
;  548	        else if (*tokens == 'y')
	JR	L_74
L_70:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,121
	SBC	HL,BC
	JR	NZ,L_68
;  549	        {
;  550	        	pushRPN(Y); //push argument Y to stack
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  551	        }
;  552		#define binop(x)  b = popRPN(), a = popRPN(), pushRPN(x) //pop, pop, push
;  553	        else if (*tokens == '+')
	JR	L_74
L_68:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,43
	SBC	HL,BC
	JR	NZ,L_66
;  554	        {
;  555	        	binop(a + b);
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-4),BC
	LD	(IX+-1),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	A,(IX+-1)
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  556	        }
;  557	        else if (*tokens == '-')
	JR	L_74
L_66:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,45
	SBC	HL,BC
	JR	NZ,L_64
;  558	        {
;  559	        	binop(a - b);
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-4),BC
	LD	(IX+-1),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	A,(IX+-1)
	CALL	__fsub
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  560	        }
;  561	        else if (*tokens == '*')
	JR	L_74
L_64:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,42
	SBC	HL,BC
	JR	NZ,L_62
;  562	        {
;  563	        	binop(a * b);
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-4),BC
	LD	(IX+-1),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  564	        }
;  565	        else if (*tokens == '/')
	JR	L_74
L_62:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JR	NZ,L_60
;  566	        {
;  567	        	binop(a / b);
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-4),BC
	LD	(IX+-1),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	A,(IX+-1)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  568	        }
;  569	        else if (*tokens == '^')
	JR	L_74
L_60:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,94
	SBC	HL,BC
	JR	NZ,L_74
;  570	        {
;  571	        	binop(pow(a, b));
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_pow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  572	        }
;  573	#undef binop
;  574	
;  575	    }
L_74:
	LD	BC,(_w)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(_tokens),HL
L_75:
	LD	BC,0
	LD	HL,(_tokens)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_73
;  576	    return popRPN();
	CALL	_popRPN
;  577	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _parseRPN ***************************
;Name                         Addr/Register   Size   Type
;_pow                                IMPORT  -----   function
;_popRPN                             IMPORT  -----   function
;_pushRPN                            IMPORT  -----   function
;_e                                  STATIC      3   variable
;_strtod                             IMPORT  -----   function
;_tokens                             STATIC      3   variable
;_w                                  STATIC      3   variable
;_strtok                             IMPORT  -----   function
;_c                                  STATIC     40   variable
;_strcpy                             IMPORT  -----   function
;_initRPN                            IMPORT  -----   function
;b                                     IX-8      4   variable
;a                                     IX-4      4   variable
;Y                                    IX+15      4   parameter
;X                                     IX+9      4   parameter
;s                                     IX+6      3   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: 0 (instruction)


;  578	
;  579	void pushOP(char op)
;  580	{
_pushOP:
	CALL	__frameset0
;  581	    OP.op[OP.size++] = op;
	LD	HL,(_OP+96)
	LD	BC,_OP
	ADD	HL,BC
	LD	A,(IX+6)
	LD	(HL),A
	LD	BC,(_OP+96)
	INC	BC
	LD	(_OP+96),BC
;  582	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pushOP ***************************
;Name                         Addr/Register   Size   Type
;_OP                                 STATIC     99   variable
;op                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  583	double popOP(void)
;  584	{
_popOP:
;  585	    return OP.op[--OP.size];
	LD	BC,(_OP+96)
	DEC	BC
	LD	(_OP+96),BC
	LD	HL,(_OP+96)
	LD	BC,_OP
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	A,H
	LD	BC,HL
	CALL	__ltof
	LD	E,A
	LD	HL,BC
;  586	}
	RET	


;**************************** _popOP ***************************
;Name                         Addr/Register   Size   Type
;_OP                                 STATIC     99   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  587	void shunt(void)
;  588	{
_shunt:
;  589	
;  590	}
	RET	


;**************************** _shunt ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_BlitRectangle:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine_NoClip:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_Line_NoClip:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _kb_Scan:ROM
	XREF _strtok:ROM
	XREF _strcpy:ROM
	XREF _memset:ROM
	XREF _strtod:ROM
	XREF _floor:ROM
	XREF _pow:ROM
	XREF _sin:ROM
	XREF _cos:ROM
	XREF _os_GetCSC:ROM
	XREF _os_StrToReal:ROM
	XREF _os_RealToStr:ROM
	XREF _os_FloatToReal:ROM
	XREF _os_RealToFloat:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XDEF _shunt
	XDEF _popOP
	XDEF _pushOP
	XDEF _parseRPN
	XDEF _popRPN
	XDEF _pushRPN
	XDEF _initRPN
	XDEF _strToFloat
	XDEF _floatToStr
	XDEF _tokenize
	XDEF _mod
	XDEF _function
	XDEF _z_y
	XDEF _z_x
	XDEF _y_y
	XDEF _y_x
	XDEF _x_y
	XDEF _x_x
	XDEF _fillScreen
	XDEF _printText
	XDEF _main
	XDEF _OP
	XDEF _size
	XDEF _val
	XDEF _tokens
	XDEF _w
	XDEF _e
	XDEF _d
	XDEF _c
	XDEF _bb
	XDEF _aa
	XDEF _r
	XDEF _text
	END
