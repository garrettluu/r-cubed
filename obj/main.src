; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT STRSECT
L__0:
	DB	"Graphing..."
	DB	0
	SEGMENT DATA
_graph:
	DW24	L__0
	SEGMENT STRSECT
L__1:
	DB	"Main Menu"
	DB	0
	SEGMENT DATA
_menuTitle:
	DW24	L__1
	SEGMENT BSS
_yaw_orig:
	DS 4*1
_roll_orig:
	DS 4*1
_pitch_orig:
	DS 4*1
;    1	/*    The (not) AMAZING 3D grapher for the TI84+CE
;    2	 *by gluu
;    3	 *currently in a very early alpha stage
;    4	 *DONE! Mathematical expression parser
;    5	 *DONE! better way of handling perspective
;    6	 *DONE(sort of)! fix bug regarding wrapping of screen when graphing
;    7	 *TODO: shunting yard algorithm
;    8	 *TODO: possible cylindrical and spherical plots?
;    9	 *
;   10	 *Based on the 3D parametric grapher on desmos
;   11	 *
;   12	 *Please bear with parts of code that are redundant or inefficient.
;   13	    I don't care enough to fix them for now.
;   14	 *
;   15	 * I think I fixed all indentation and formatting
;   16	 *
;   17	 */
;   18	
;   19	//headers
;   20	#include <stdbool.h>
;   21	#include <stddef.h>
;   22	#include <stdint.h>
;   23	#include <tice.h>
;   24	
;   25	//std headers
;   26	#include <math.h>
;   27	#include <stdio.h>
;   28	#include <stdlib.h>
;   29	#include <string.h>
;   30	
;   31	//c libraries
;   32	#include <keypadc.h>
;   33	#include <graphx.h>
;   34	#include <fileioc.h>
;   35	
;   36	#define DELAY 250
;   37	
;   38	//initialize strings
;   39	const char *graph = "Graphing...";
;   40	const char *menuTitle = "Main Menu";
;   41	
;   42	double x_x(double a, double b, double c);
;   43	double x_y(double a, double b, double c);
;   44	double y_x(double a, double b, double c);
;   45	double y_y(double a, double b, double c);
;   46	double z_x(double a, double b, double c);
;   47	double z_y(double a, double b, double c);
;   48	
;   49	double mod(double a, double b);
;   50	char *tokenize(char *input);
;   51	char* backspace(char* str);
;   52	
;   53	void pushRPN(double val);
;   54	double popRPN(void);
;   55	double parseRPN(char *s, double X, double Y);
;   56	
;   57	void shunt(void);
;   58	
;   59	static double yaw_orig; //dummy variables we'll use later
;   60	static double roll_orig;
;   61	static double pitch_orig;
	SEGMENT CODE
;   62	static void drawPerspectiveBox(void) {
_drawPerspectiveBox:
	LD	HL,-18
	CALL	__frameset
;   63	    int xx_25 = x_x(yaw_orig, roll_orig, pitch_orig) * 25;
	LD	A,(_pitch_orig+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(_roll_orig+3)
	LD	C,A
	LD	DE,(_pitch_orig)
	PUSH	DE
	PUSH	BC
	LD	A,(_yaw_orig+3)
	LD	C,A
	LD	DE,(_roll_orig)
	PUSH	DE
	PUSH	BC
	LD	BC,(_yaw_orig)
	PUSH	BC
	CALL	_x_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-3),BC
;   64	    int xy_25 = x_y(yaw_orig, roll_orig, pitch_orig) * 25;
	LD	A,(_pitch_orig+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(_roll_orig+3)
	LD	C,A
	LD	DE,(_pitch_orig)
	PUSH	DE
	PUSH	BC
	LD	A,(_yaw_orig+3)
	LD	C,A
	LD	DE,(_roll_orig)
	PUSH	DE
	PUSH	BC
	LD	BC,(_yaw_orig)
	PUSH	BC
	CALL	_x_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-6),BC
;   65	    int yx_25 = y_x(yaw_orig, roll_orig, pitch_orig) * 25;
	LD	A,(_pitch_orig+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(_roll_orig+3)
	LD	C,A
	LD	DE,(_pitch_orig)
	PUSH	DE
	PUSH	BC
	LD	A,(_yaw_orig+3)
	LD	C,A
	LD	DE,(_roll_orig)
	PUSH	DE
	PUSH	BC
	LD	BC,(_yaw_orig)
	PUSH	BC
	CALL	_y_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-9),BC
;   66	    int yy_25 = y_y(yaw_orig, roll_orig, pitch_orig) * 25;
	LD	A,(_pitch_orig+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(_roll_orig+3)
	LD	C,A
	LD	DE,(_pitch_orig)
	PUSH	DE
	PUSH	BC
	LD	A,(_yaw_orig+3)
	LD	C,A
	LD	DE,(_roll_orig)
	PUSH	DE
	PUSH	BC
	LD	BC,(_yaw_orig)
	PUSH	BC
	CALL	_y_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-12),BC
;   67	    int zx_25 = z_x(yaw_orig, roll_orig, pitch_orig) * 25;
	LD	A,(_pitch_orig+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(_roll_orig+3)
	LD	C,A
	LD	DE,(_pitch_orig)
	PUSH	DE
	PUSH	BC
	LD	A,(_yaw_orig+3)
	LD	C,A
	LD	DE,(_roll_orig)
	PUSH	DE
	PUSH	BC
	LD	BC,(_yaw_orig)
	PUSH	BC
	CALL	_z_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-15),BC
;   68	    int zy_25 = z_y(yaw_orig, roll_orig, pitch_orig) * 25;
	LD	A,(_pitch_orig+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(_roll_orig+3)
	LD	C,A
	LD	DE,(_pitch_orig)
	PUSH	DE
	PUSH	BC
	LD	A,(_yaw_orig+3)
	LD	C,A
	LD	DE,(_roll_orig)
	PUSH	DE
	PUSH	BC
	LD	BC,(_yaw_orig)
	PUSH	BC
	CALL	_z_y
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	CALL	__ftol
;   69	
;   70	    //The perspective box
;   71	    //This is my solution to controlling perspective, since we can't rotate in real time
;   72	    //rotate the preview axes to desired position and press enter, and the function will redraw itself
;   73	
;   74	    gfx_SetColor(gfx_white);
	LD	HL,255
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	POP	DE
	LD	(IX+-18),BC
	PUSH	HL
	CALL	_gfx_SetColor
	POP	BC
;   75	    gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   76	
;   77	    gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   78	    gfx_VertLine_NoClip(320 - 64, 0, 64); //borders for box
	LD	BC,64
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   79	    gfx_HorizLine_NoClip(320 - 64, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   80	
;   81	    //x-axis
;   82	    gfx_Line_NoClip(288 - xx_25, 32 + xy_25, 288 + xx_25, 32 - xy_25);
	LD	B,(IX+-6)
	LD	A,32
	SUB	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-3)
	LD	BC,288
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-6)
	ADD	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	OR	A,A
	LD	HL,288
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   83	    gfx_PrintStringXY("x", 288 + xx_25, 32 - xy_25);
	LD	BC,(IX+-6)
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	HL,(IX+-3)
	LD	BC,288
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   84	
;   85	    //y-axis
;   86	    gfx_Line_NoClip(288 - yx_25, 32 + yy_25, 288 + yx_25, 32 - yy_25);
	LD	B,(IX+-12)
	LD	A,32
	SUB	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-9)
	LD	BC,288
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-12)
	ADD	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	OR	A,A
	LD	HL,288
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   87	    gfx_PrintStringXY("y", 288 + yx_25, 32 - yy_25);
	LD	BC,(IX+-12)
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	HL,(IX+-9)
	LD	BC,288
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__3
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   88	
;   89	    //z-axis
;   90	    gfx_Line_NoClip(288 - zx_25, 32 + zy_25, 288 + zx_25, 32 - zy_25);
	LD	B,(IX+-18)
	LD	A,32
	SUB	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-15)
	LD	BC,288
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-18)
	ADD	A,32
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-15)
	OR	A,A
	LD	HL,288
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   91	    gfx_PrintStringXY("z", 288 + zx_25, 32 - zy_25);
	LD	BC,(IX+-18)
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	HL,(IX+-15)
	LD	BC,288
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__4
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   92	    gfx_BlitRectangle(gfx_buffer, 320 - 64, 0, 64, 65);
	LD	BC,65
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_BlitRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   93	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawPerspectiveBox ***************************
;Name                         Addr/Register   Size   Type
;_gfx_BlitRectangle                  IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Line_NoClip                    IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_VertLine_NoClip                IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_z_y                                IMPORT  -----   function
;_z_x                                IMPORT  -----   function
;_y_y                                IMPORT  -----   function
;_y_x                                IMPORT  -----   function
;_x_y                                IMPORT  -----   function
;_yaw_orig                           STATIC      4   variable
;_roll_orig                          STATIC      4   variable
;_pitch_orig                         STATIC      4   variable
;_x_x                                IMPORT  -----   function
;zy_25                                IX-18      3   variable
;zx_25                                IX-15      3   variable
;yy_25                                IX-12      3   variable
;yx_25                                 IX-9      3   variable
;xy_25                                 IX-6      3   variable
;xx_25                                 IX-3      3   variable


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__2:
	DB	"x"
	DB	0
L__3:
	DB	"y"
	DB	0
L__4:
	DB	"z"
	DB	0
	SEGMENT DATA
_equ:
	DB	120
	DB	32
	DB	115
	DB	105
	DB	110
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
;   94	
;   95	char equ[40] = "x sin";
	SEGMENT CODE
;   96	static void addToEqu(const char *str)
;   97	{
_addToEqu:
	CALL	__frameset0
;   98	    strcat(equ, str);
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,_equ
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;   99	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _addToEqu ***************************
;Name                         Addr/Register   Size   Type
;_equ                                STATIC     40   variable
;_strcat                             IMPORT  -----   function
;str                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  100	
;  101	//main function
;  102	//this is what gets run when the program starts
;  103	void main(void)
;  104	{
_main:
	LD	HL,-137
	CALL	__frameset
;  105	    sk_key_t key;
;  106	
;  107	    //declare variables and some constants
;  108	    //uint8_t is the best thing ever
;  109	    //it's basically an unsigned 8bit integer that takes up less space than an int
;  110	    //but functions the same as an int for all intents and purposes (except negatives)
;  111	    uint8_t sel; //used for menu selections
;  112	    bool graphingIsComplete = false; //used to plot points
	LD	(IX+-30),0
;  113	    bool main = true;
	LD	(IX+-9),1
;  114	    uint8_t mode = 0; //used for menu selections
	LD	(IX+-8),0
;  115	    double yaw = -2.3; //yaw
	LD	BC,1258291
	LD	(IX+-13),BC
	LD	A,192
	LD	(IX+-10),A
;  116	    double roll = .6; //roll
	LD	BC,1677722
	LD	(IX+-17),BC
	LD	A,63
	LD	(IX+-14),A
;  117	    double pitch = 0; //pitch; this never changes since i don't want people to mess with the rotation of the screen
	LD	BC,0
	LD	(IX+-21),BC
	XOR	A,A
	LD	(IX+-18),A
;  118	    const double s = 15; //scale of the graph
;  119	    const double s2 = 3.75; //how much of the graph gets shown
;  120	    const double n = 10; //resolution of the grid of the graph is (higher = more detail)
;  121	
;  122	    uint8_t *xxNodes = malloc(128); //create the node arrays
	LD	BC,128
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_malloc
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	(IX+-81),HL
;  123	    uint8_t *xyNodes = malloc(128);
	LD	BC,128
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_malloc
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	(IX+-84),HL
;  124	    uint8_t *yxNodes = malloc(128);
	LD	BC,128
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_malloc
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	(IX+-87),HL
;  125	    uint8_t *yyNodes = malloc(128);
	LD	BC,128
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_malloc
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	(IX+-90),HL
;  126	
;  127	    //dummy variables we'll use later
;  128	    yaw_orig = yaw;
	LD	BC,1258291
	LD	(_yaw_orig),BC
	LD	A,192
	LD	(_yaw_orig+3),A
;  129	    roll_orig = roll;
	LD	BC,1677722
;  130	    pitch_orig = pitch;
;  131	
;  132	    //------program actually starts here------\\
;  133	
;  134	    prgm_CleanUp(); //clear the screen
;  135	
;  136	    gfx_Begin(); //initialize advanced graphx
	LD	DE,39
	PUSH	DE
	LD	(_roll_orig),BC
	LD	A,63
	LD	(_roll_orig+3),A
	LD	BC,0
	LD	(_pitch_orig),BC
	XOR	A,A
	LD	(_pitch_orig+3),A
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Begin
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  137	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetDraw
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  138	
;  139	    gfx_PrintStringXY("R3 - 3D grapher for the TI84PCE", 12, 12); //print title text
	LD	BC,12
	PUSH	BC
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  140	    gfx_PrintStringXY("f(x,y) = ", 12, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  141	    gfx_PrintStringXY(equ, 98, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,98
	PUSH	BC
	LD	BC,_equ
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  142	    gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  143	
;  144	    while (!os_GetCSC()); //wait for input
L_3:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	OR	A,A
	JR	Z,L_3
;  145	
;  146	    sel = 0;
	LD	(IX+-2),0
;  147	    key = 1;
	LD	(IX+-3),1
;  148	
;  149	MAIN:
;  150	
;  151	    do
L_19:
;  152	    {
;  153	        if (key) {
	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_7
;  154	            gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  155	            gfx_PrintStringXY(menuTitle, 160-gfx_GetStringWidth(menuTitle),12);
	LD	BC,12
	PUSH	BC
	LD	BC,(_menuTitle)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(_menuTitle)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  156	            gfx_PrintStringXY("Enter equation ", 12, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  157	            gfx_PrintStringXY("Graph", 12, 30);
	LD	BC,30
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  158	            gfx_PrintStringXY("*",4,21+(sel*9));
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+21
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  159	            gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  160	        }
L_7:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  161	
;  162	        key = os_GetCSC();
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	(IX+-3),A
;  163	
;  164	        switch (key)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__14:
	LD	DE,4
	OR	A,A
	SBC	HL,DE
	JR	Z,L_8
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L__16
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_11
	JR	L_20
L__16:
	LD	DE,9
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_14
	JR	L_20
;  165	        {
;  166	            case sk_Up:
L_8:
;  167	                if (sel > 0)
	XOR	A,A
	CP	A,(IX+-2)
	JR	NC,L_20
;  168	                {
;  169	                    --sel;
	DEC	(IX+-2)
;  170	                }
;  171	                break;
	JR	L_20
;  172	            case sk_Down:
L_11:
;  173	                if (sel < 1)
	LD	A,(IX+-2)
	CP	A,1
	JR	NC,L_20
;  174	                {
;  175	                    ++sel;
	INC	(IX+-2)
;  176	                }
;  177	                break;
	JR	L_20
;  178	            case sk_Enter:
L_14:
;  179	                if (main)
	LD	A,(IX+-9)
	OR	A,A
	JR	Z,L_20
;  180	                {
;  181	                    main = false;
	LD	(IX+-9),0
;  182	                    mode = sel + 1;
	LD	A,(IX+-2)
	INC	A
	LD	(IX+-8),A
;  183	                }
;  184	            default:
;  185	                break;
;  186	        }
;  187	    }
;  188	    
;  189	    while(main && os_GetCSC() != sk_2nd);
L_20:
	LD	A,(IX+-9)
	OR	A,A
	JR	Z,L_55
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_19
L_55:
;  190	    
;  191	    if (mode == 1)
	LD	A,(IX+-8)
	CP	A,1
	JR	NZ,L_92
;  192	    {
;  193	        sk_key_t key;
;  194	        //quite possibly the most annoying thing to code
;  195	        do
L_52:
;  196	        {
;  197	            key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-32),A
;  198	            
;  199	            gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  200	            gfx_PrintStringXY("f(x,y) = ", 12, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__24
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  201	            gfx_PrintStringXY(equ, 64, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,_equ
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  202	            gfx_PrintStringXY("|", 64+gfx_GetStringWidth(equ),21);
	LD	BC,21
	PUSH	BC
	LD	BC,_equ
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+64
	PUSH	BC
	LD	BC,L__25
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  203	            gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  204	            
;  205	            //Welcome to Switch-Statement City! Population: 0, cuz no one wants to live in this atrocious town
;  206	            //Hope you enjoy your stay!
;  207	            switch(key)
	LD	A,(IX+-32)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__27:
	LD	DE,9
	OR	A,A
	SBC	HL,DE
	JR	C,L_53
	LD	HL,56
	OR	A,A
	SBC	HL,BC
	JR	C,L_53
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,L__26-27
	ADD	HL,BC
	LD	HL,(HL)
	JP	(HL)
L__26:
	DW24	L_43	

	DW24	L_45	

	DW24	L_44	

	DW24	L_46	

	DW24	L_47	

	DW24	L_48	

	DW24	L_49	

	DW24	L_38	

	DW24	L_53	

	DW24	L_39	

	DW24	L_40	

	DW24	L_41	

	DW24	L_53	

	DW24	L_42	

	DW24	L_53	

	DW24	L_53	

	DW24	L_32	

	DW24	L_33	

	DW24	L_34	

	DW24	L_35	

	DW24	L_53	

	DW24	L_36	

	DW24	L_53	

	DW24	L_37	

	DW24	L_24	

	DW24	L_25	

	DW24	L_26	

	DW24	L_27	

	DW24	L_28	

	DW24	L_29	

	DW24	L_53	

	DW24	L_31	

	DW24	L_53	

	DW24	L_53	

	DW24	L_22	

	DW24	L_23	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_53	

	DW24	L_21	

;  208	            {
;  209	                case sk_Del:
L_21:
;  210	                    backspace(equ);
	LD	BC,_equ
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_backspace
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  211	                    break;
	JR	L_53
;  212	                case sk_Ln:
L_22:
;  213	                    addToEqu("ln");
	LD	BC,L__30
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  214	                    break;
	JR	L_53
;  215	                case sk_Log:
L_23:
;  216	                    addToEqu("log");
	LD	BC,L__31
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  217	                    break;
	JR	L_53
;  218	                case sk_0:
L_24:
;  219	                    addToEqu("0");
	LD	BC,L__32
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  220	                    break;
	JR	L_53
;  221	                case sk_1:
L_25:
;  222	                    addToEqu("1");
	LD	BC,L__33
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  223	                    break;
	JR	L_53
;  224	                case sk_4:
L_26:
;  225	                    addToEqu("4");
	LD	BC,L__34
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  226	                    break;
	JR	L_53
;  227	                case sk_7:
L_27:
;  228	                    addToEqu("7");
	LD	BC,L__35
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  229	                    break;
	JR	L_53
;  230	                case sk_Comma:
L_28:
;  231	                    addToEqu(" ");
	LD	BC,L__36
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  232	                    break;
	JR	L_53
;  233	                case sk_Sin:
L_29:
;  234	                    addToEqu("sin");
	LD	BC,L__37
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  235	                    break;
	JR	L_53
;  236	                case sk_Apps:
;  237	                    break;
;  238	                case sk_GraphVar:
L_31:
;  239	                    addToEqu("x");
	LD	BC,L__38
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  240	                    break;
	JR	L_53
;  241	                case sk_DecPnt:
L_32:
;  242	                    addToEqu(".");
	LD	BC,L__39
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  243	                    break;
	JR	L_53
;  244	                case sk_2:
L_33:
;  245	                    addToEqu("2");
	LD	BC,L__40
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  246	                    break;
	JR	L_53
;  247	                case sk_5:
L_34:
;  248	                    addToEqu("5");
	LD	BC,L__41
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  249	                    break;
	JR	L_53
;  250	                case sk_8:
L_35:
;  251	                    addToEqu("8");
	LD	BC,L__42
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  252	                    break;
	JR	L_53
;  253	                case sk_Cos:
L_36:
;  254	                    addToEqu("cos");
	LD	BC,L__43
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  255	                    break;
	JR	L_53
;  256	                case sk_Stat:
L_37:
;  257	                    addToEqu("y");
	LD	BC,L__44
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  258	                    break;
	JR	L_53
;  259	                case sk_Chs:
L_38:
;  260	                    addToEqu("`");
	LD	BC,L__45
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  261	                    break;
	JR	L_53
;  262	                case sk_3:
L_39:
;  263	                    addToEqu("3");
	LD	BC,L__46
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  264	                    break;
	JR	L_53
;  265	                case sk_6:
L_40:
;  266	                    addToEqu("6");
	LD	BC,L__47
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  267	                    break;
	JR	L_53
;  268	                case sk_9:
L_41:
;  269	                    addToEqu("9");
	LD	BC,L__48
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  270	                    break;
	JR	L_53
;  271	                case sk_Tan:
L_42:
;  272	                    addToEqu("tan");
	LD	BC,L__49
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  273	                    break;
	JR	L_53
;  274	                case sk_Enter:
L_43:
;  275	                    main = true;
	LD	(IX+-9),1
;  276	                    mode = 0;
	LD	(IX+-8),0
;  277	                    goto MAIN;
	JR	L_19
;  278	                case sk_Sub:
L_44:
;  279	                    addToEqu("-");
	LD	BC,L__50
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  280	                    break;
	JR	L_53
;  281	                case sk_Add:
L_45:
;  282	                    addToEqu("+");
	LD	BC,L__51
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  283	                    break;
	JR	L_53
;  284	                case sk_Mul:
L_46:
;  285	                    addToEqu("*");
	LD	BC,L__52
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  286	                    break;
	JR	L_53
;  287	                case sk_Div:
L_47:
;  288	                    addToEqu("/");
	LD	BC,L__53
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  289	                    break;
	JR	L_53
;  290	                case sk_Power:
L_48:
;  291	                    addToEqu("^");
	LD	BC,L__54
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  292	                    break;
	JR	L_53
;  293	                case sk_Clear:
L_49:
;  294	                    addToEqu("");
	LD	BC,L__55
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_addToEqu
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  295	                    break;
;  296	                default:
;  297	                    break;
;  298	            }
;  299	        } while(mode == 1 && key != kb_2nd);
L_53:
	LD	A,(IX+-8)
	CP	A,1
	JR	NZ,L_92
	LD	A,(IX+-32)
	CP	A,32
	JR	NZ,L_52
;  300	    }
L_92:
;  301	    
;  302	    if (mode == 2)
	LD	A,(IX+-8)
	CP	A,2
	JR	NZ,L_93
;  303	    {
;  304	        //the stuff here will only happen the first time this loop is run
;  305	        gfx_FillScreen(gfx_white); //fill the screen with white
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillScreen
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  306	        gfx_PrintStringXY(graph, 320 - gfx_GetStringWidth(graph), 230);
	LD	BC,230
	PUSH	BC
	LD	BC,(_graph)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(_graph)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  307	        gfx_BlitRectangle(gfx_buffer, 320 - gfx_GetStringWidth(graph), 230, gfx_GetStringWidth(graph), 10);
	LD	BC,10
	PUSH	BC
	LD	BC,(_graph)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,230
	PUSH	BC
	LD	BC,(_graph)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_BlitRectangle
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  308	
;  309	        do
L_89:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  310	        {
;  311	            key = os_GetCSC();
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	(IX+-3),A
;  312	
;  313	            switch (key)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__60:
	LD	DE,1
	OR	A,A
	SBC	HL,DE
	JR	C,L_62
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_62
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,L__59-3
	ADD	HL,BC
	LD	HL,(HL)
	JP	(HL)
L__59:
	DW24	L_57	

	DW24	L_58	

	DW24	L_59	

	DW24	L_56	

;  314	            {
;  315	                //this is for controlling perspective, but the ez80 is a crappy 48mHz cpu and can't do this in real time
;  316	                //(well it can, but it has to redraw the function every freakin' time)
;  317	                case sk_Up:
L_56:
;  318	                    roll_orig += .15;
	LD	HL,1677722
	LD	E,62
	LD	BC,(_roll_orig)
	LD	A,(_roll_orig+3)
	CALL	__fadd
	LD	(_roll_orig),BC
	LD	(_roll_orig+3),A
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  319	                    drawPerspectiveBox();
	CALL	_drawPerspectiveBox
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  320	                    break;
	JR	L_62
;  321	                case sk_Down:
L_57:
;  322	                    roll_orig -= .15;
	LD	HL,1677722
	LD	E,62
	LD	BC,(_roll_orig)
	LD	A,(_roll_orig+3)
	CALL	__fsub
	LD	(_roll_orig),BC
	LD	(_roll_orig+3),A
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  323	                    drawPerspectiveBox();
	CALL	_drawPerspectiveBox
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  324	                    break;
	JR	L_62
;  325	                case sk_Left:
L_58:
;  326	                    yaw_orig += .15;
	LD	HL,1677722
	LD	E,62
	LD	BC,(_yaw_orig)
	LD	A,(_yaw_orig+3)
	CALL	__fadd
	LD	(_yaw_orig),BC
	LD	(_yaw_orig+3),A
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  327	                    drawPerspectiveBox();
	CALL	_drawPerspectiveBox
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  328	                    break;
	JR	L_62
;  329	                case sk_Right:
L_59:
;  330	                    yaw_orig -= .15;
	LD	HL,1677722
	LD	E,62
	LD	BC,(_yaw_orig)
	LD	A,(_yaw_orig+3)
	CALL	__fsub
	LD	(_yaw_orig),BC
	LD	(_yaw_orig+3),A
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  331	                    drawPerspectiveBox();
	CALL	_drawPerspectiveBox
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  332	                    break;
;  333	                default:
;  334	                    break;
;  335	            }
L_62:
;  336	
;  337	            if (key == sk_Enter)
	LD	A,(IX+-3)
	CP	A,9
	JR	NZ,L_88
;  338	            {
;  339	                uint8_t strWidth = gfx_GetStringWidth(graph);
	LD	BC,(_graph)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	(IX+-31),L
;  340	                gfx_PrintStringXY(graph, 320 - strWidth, 230);
	LD	BC,230
	PUSH	BC
	LD	A,(IX+-31)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(_graph)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  341	                gfx_BlitRectangle(gfx_buffer, 320 - strWidth, 230, strWidth, 10);
	LD	BC,10
	PUSH	BC
	LD	A,(IX+-31)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,230
	PUSH	BC
	LD	A,(IX+-31)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_BlitRectangle
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  342	                yaw = yaw_orig;
	LD	BC,(_yaw_orig)
	LD	A,(_yaw_orig+3)
	LD	(IX+-13),BC
	LD	(IX+-10),A
;  343	                roll = roll_orig;
	LD	BC,(_roll_orig)
	LD	A,(_roll_orig+3)
	LD	(IX+-17),BC
	LD	(IX+-14),A
;  344	                pitch = pitch_orig;
	LD	BC,(_pitch_orig)
	LD	A,(_pitch_orig+3)
	LD	(IX+-21),BC
	LD	(IX+-18),A
;  345	                graphingIsComplete = false;
	LD	(IX+-30),0
;  346	            }
L_88:
;  347	
;  348	            if (!graphingIsComplete)
	LD	A,(IX+-30)
	OR	A,A
	JR	NZ,L_90
;  349	            {
;  350	                uint8_t i;
;  351	                float t;
;  352	
;  353	                float xx_a_b_c = x_x(yaw, roll, pitch);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-58),HL
	LD	(IX+-55),E
;  354	                float xy_a_b_c = x_y(yaw, roll, pitch);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-62),HL
	LD	(IX+-59),E
;  355	                float yx_a_b_c = y_x(yaw, roll, pitch);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-66),HL
	LD	(IX+-63),E
;  356	                float yy_a_b_c = y_y(yaw, roll, pitch);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-70),HL
	LD	(IX+-67),E
;  357	                float zx_a_b_c = z_x(yaw, roll, pitch);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-74),HL
	LD	(IX+-71),E
;  358	                float zy_a_b_c = z_y(yaw, roll, pitch);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-78),HL
	LD	(IX+-75),E
;  359	
;  360	                int xx_a_b_c_100 = xx_a_b_c * 100;
	LD	E,66
	LD	BC,(IX+-58)
	LD	A,(IX+-55)
	LD	HL,13107200
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-39),BC
;  361	                int xy_a_b_c_100 = xy_a_b_c * 100;
	LD	BC,(IX+-62)
	LD	A,(IX+-59)
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-42),BC
;  362	                int yx_a_b_c_100 = yx_a_b_c * 100;
	LD	BC,(IX+-66)
	LD	A,(IX+-63)
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-45),BC
;  363	                int yy_a_b_c_100 = yy_a_b_c * 100;
	LD	BC,(IX+-70)
	LD	A,(IX+-67)
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-48),BC
;  364	                int zx_a_b_c_100 = zx_a_b_c * 100;
	LD	BC,(IX+-74)
	LD	A,(IX+-71)
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-51),BC
;  365	                int zy_a_b_c_100 = zy_a_b_c * 100;
	LD	BC,(IX+-78)
	LD	A,(IX+-75)
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	CALL	__ftol
	LD	(IX+-54),BC
;  366	                
;  367	                //basically, this is the for-loop that controls graphing
;  368	                //initial condition: t=0
;  369	                //go until t is greater than one
;  370	                //add dx to t each time
;  371	                gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillScreen
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  372	                gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  373	                
;  374	                //x-axis
;  375	                gfx_Line_NoClip(160 - xx_a_b_c_100, 120 + xy_a_b_c_100, 160 + xx_a_b_c_100, 120 - xy_a_b_c_100);
	LD	B,(IX+-42)
	LD	A,120
	SUB	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-39)
	LD	BC,160
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-42)
	ADD	A,120
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-39)
	OR	A,A
	LD	HL,160
	SBC	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  376	                gfx_PrintStringXY("x", 160 + xx_a_b_c_100, 120 - xy_a_b_c_100);
	LD	BC,(IX+-42)
	LD	HL,120
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	HL,(IX+-39)
	LD	BC,160
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__65
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  377	                
;  378	                //y-axis
;  379	                gfx_Line_NoClip(160 - yx_a_b_c_100, 120 + yy_a_b_c_100, 160 + yx_a_b_c_100, 120 - yy_a_b_c_100);
	LD	B,(IX+-48)
	LD	A,120
	SUB	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-45)
	LD	BC,160
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-48)
	ADD	A,120
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-45)
	OR	A,A
	LD	HL,160
	SBC	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  380	                gfx_PrintStringXY("y", 160 + yx_a_b_c_100, 120 - yy_a_b_c_100);
	LD	BC,(IX+-48)
	LD	HL,120
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	HL,(IX+-45)
	LD	BC,160
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__66
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  381	                
;  382	                //z-axis
;  383	                gfx_Line_NoClip(160 - zx_a_b_c_100, 120 + zy_a_b_c_100, 160 + zx_a_b_c_100, 120 - zy_a_b_c_100);
	LD	B,(IX+-54)
	LD	A,120
	SUB	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-51)
	LD	BC,160
	ADD	HL,BC
	PUSH	HL
	LD	A,(IX+-54)
	ADD	A,120
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-51)
	OR	A,A
	LD	HL,160
	SBC	HL,BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  384	                gfx_PrintStringXY("z", 160 + zx_a_b_c_100, 120 - zy_a_b_c_100);
	LD	BC,(IX+-54)
	LD	HL,120
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	HL,(IX+-51)
	LD	BC,160
	ADD	HL,BC
	PUSH	HL
	LD	BC,L__67
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  385	                
;  386	                for (i = 0, t = 0; t < 1 && os_GetCSC() != sk_2nd; t += .00909, i++)
	LD	(IX+-1),0
	LD	BC,0
	LD	(IX+-36),BC
	XOR	A,A
	LD	(IX+-33),A
	JR	L_85
L_83:
;  387	                {
;  388	                    uint8_t xxNode, xyNode, yxNode, yyNode;
;  389	                    uint8_t xxNode_p, xyNode_p, yxNode_p, yyNode_p;
;  390	
;  391	                    //equations for the grid/graph
;  392	                    double g = 2 * s2 * ((floor(t * (n + 1)) / n) - .5);
	LD	HL,3145728
	LD	E,65
	LD	BC,(IX+-36)
	LD	A,(IX+-33)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,2097152
	LD	E,65
	CALL	__fdiv
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-25),BC
	LD	(IX+-22),A
;  393	                    double h = 2 * s2 * (mod(t * (n + 1), 1) - .5);
	LD	C,63
	LD	B,0
	PUSH	BC
	LD	HL,3145728
	LD	E,65
	LD	BC,8388608
	PUSH	BC
	LD	BC,(IX+-36)
	LD	A,(IX+-33)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mod
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-29),BC
	LD	(IX+-26),A
;  394	                    double pRPN_h_g = parseRPN(equ, h, g);
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	BC,_equ
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-94),HL
	LD	(IX+-91),E
;  395	                    double pRPN_g_h = parseRPN(equ, g, h);
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	LD	BC,_equ
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-98),HL
	LD	(IX+-95),E
;  396	                    
;  397	                    xxNode = (160 + (s * ((xx_a_b_c * g) + (yx_a_b_c * h) + (zx_a_b_c * pRPN_g_h * .25)))); //fill out the arrays of nodes
	LD	HL,(IX+-25)
	LD	E,(IX+-22)
	LD	BC,(IX+-58)
	LD	A,(IX+-55)
	CALL	__fmul
	LD	(IX+-101),BC
	LD	(IX+-102),A
	LD	A,(IX+-63)
	LD	BC,(IX+-66)
	LD	HL,(IX+-29)
	LD	E,(IX+-26)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-101)
	LD	A,(IX+-102)
	CALL	__fadd
	LD	(IX+-105),BC
	LD	(IX+-106),A
	LD	A,(IX+-71)
	LD	BC,(IX+-74)
	LD	HL,(IX+-98)
	LD	E,(IX+-95)
	CALL	__fmul
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-105)
	LD	A,(IX+-106)
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-4),C
;  398	                    xyNode = (120 - (s * ((xy_a_b_c * g) + (yy_a_b_c * h) + (zy_a_b_c * pRPN_g_h))));
	LD	HL,(IX+-25)
	LD	E,(IX+-22)
	LD	BC,(IX+-62)
	LD	A,(IX+-59)
	CALL	__fmul
	LD	(IX+-109),BC
	LD	(IX+-110),A
	LD	A,(IX+-67)
	LD	BC,(IX+-70)
	LD	HL,(IX+-29)
	LD	E,(IX+-26)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-109)
	LD	A,(IX+-110)
	CALL	__fadd
	LD	(IX+-113),BC
	LD	(IX+-114),A
	LD	A,(IX+-75)
	LD	BC,(IX+-78)
	LD	HL,(IX+-98)
	LD	E,(IX+-95)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-113)
	LD	A,(IX+-114)
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	(IX+-5),C
;  399	                    yxNode = (160 + (s * ((xx_a_b_c * h) + (yx_a_b_c * g) + (zx_a_b_c * pRPN_h_g))));
	LD	HL,(IX+-29)
	LD	E,(IX+-26)
	LD	BC,(IX+-58)
	LD	A,(IX+-55)
	CALL	__fmul
	LD	(IX+-117),BC
	LD	(IX+-118),A
	LD	A,(IX+-63)
	LD	BC,(IX+-66)
	LD	HL,(IX+-25)
	LD	E,(IX+-22)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-117)
	LD	A,(IX+-118)
	CALL	__fadd
	LD	(IX+-121),BC
	LD	(IX+-122),A
	LD	A,(IX+-71)
	LD	BC,(IX+-74)
	LD	HL,(IX+-94)
	LD	E,(IX+-91)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-121)
	LD	A,(IX+-122)
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-6),C
;  400	                    yyNode = (120 - (s * ((xy_a_b_c * h) + (yy_a_b_c * g) + (zy_a_b_c * pRPN_h_g))));
	LD	HL,(IX+-29)
	LD	E,(IX+-26)
	LD	BC,(IX+-62)
	LD	A,(IX+-59)
	CALL	__fmul
	LD	(IX+-125),BC
	LD	(IX+-126),A
	LD	A,(IX+-67)
	LD	BC,(IX+-70)
	LD	HL,(IX+-25)
	LD	E,(IX+-22)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-125)
	LD	A,(IX+-126)
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-4),BC
	LD	(IY+-6),A
	POP	IY
	LD	A,(IX+-75)
	LD	BC,(IX+-78)
	LD	HL,(IX+-94)
	LD	E,(IX+-91)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-1),BC
	LD	HL,(IY+-4)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-1)
	LD	(IY+-5),H
	LD	H,(IY+-6)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-5)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	(IX+-7),C
;  401	
;  402	                    if (xxNode > 320)
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	JP	P,L_67
;  403	                    {
;  404	                        xxNode = 320;
	LD	(IX+-4),64
;  405	                    }
;  406	                    else if (xxNode < 0)
	JR	L_71
L_67:
	LD	A,(IX+-4)
	OR	A,A
	JR	NC,L_71
;  407	                    {
;  408	                        xxNode = 0;
	LD	(IX+-4),0
;  409	                    }
L_71:
;  410	                    
;  411	                    if (xyNode > 240)
	LD	A,240
	CP	A,(IX+-5)
	JR	NC,L_70
;  412	                    {
;  413	                        xyNode = 239;
	LD	(IX+-5),239
;  414	                    }
;  415	                    else if (xyNode < 0)
	JR	L_75
L_70:
	LD	A,(IX+-5)
	OR	A,A
	JR	NC,L_75
;  416	                    {
;  417	                        xyNode = 0;
	LD	(IX+-5),0
;  418	                    }
L_75:
;  419	                    
;  420	                    if (yxNode > 320)
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	JP	P,L_74
;  421	                    {
;  422	                        yxNode = 320;
	LD	(IX+-6),64
;  423	                    }
;  424	                    else if (yxNode < 0)
	JR	L_79
L_74:
	LD	A,(IX+-6)
	OR	A,A
	JR	NC,L_79
;  425	                    {
;  426	                        yxNode = 0;
	LD	(IX+-6),0
;  427	                    }
L_79:
;  428	                    
;  429	                    if (yyNode > 240)
	LD	A,240
	CP	A,(IX+-7)
	JR	NC,L_78
;  430	                    {
;  431	                        yyNode = 239;
	LD	(IX+-7),239
;  432	                    }
;  433	                    else if (yyNode < 0)
	JR	L_80
L_78:
	LD	A,(IX+-7)
	OR	A,A
	JR	NC,L_80
;  434	                    {
;  435	                        yyNode = 0;
	LD	(IX+-7),0
;  436	                    }
L_80:
;  437	
;  438	                    xxNodes[i] = xxNode;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-81)
	ADD	HL,BC
	LD	A,(IX+-4)
	LD	(HL),A
;  439	                    xyNodes[i] = xyNode;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-84)
	ADD	HL,BC
	LD	A,(IX+-5)
	LD	(HL),A
;  440	                    yxNodes[i] = yxNode;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-87)
	ADD	HL,BC
	LD	A,(IX+-6)
	LD	(HL),A
;  441	                    yyNodes[i] = yyNode;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-90)
	ADD	HL,BC
	LD	A,(IX+-7)
	LD	(HL),A
;  442	                    
;  443	                    if (i >= 12) //for some reason the first 12 nodes don't connect to the rest, so we omit them
	LD	A,(IX+-1)
	CP	A,12
	JR	C,L_84
;  444	                    {
;  445	                        if ((i - 1) % (int)(n)) // we don't want to connect the nodes that are on opposite sides
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,10
	CALL	__irems
	LD	BC,0
	SBC	HL,BC
	JR	Z,L_84
;  446	                        {
;  447	                            gfx_SetColor(gfx_green);
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  448	                            gfx_Line(xxNodes[i - 1], xyNodes[i - 1], xxNode, xyNode);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(IX+-4)
	UEXT	HL
	LD	DE,BC
	LD	L,A
	PUSH	HL
	LD	HL,(IX+-84)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	HL,(IX+-81)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  449	                            
;  450	                            gfx_SetColor(gfx_blue);
	LD	BC,16
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  451	                            gfx_Line(yxNodes[i - 1], yyNodes[i - 1], yxNode, yyNode);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	LD	A,(IX+-7)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(IX+-6)
	UEXT	HL
	LD	DE,BC
	LD	L,A
	PUSH	HL
	LD	HL,(IX+-90)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	HL,(IX+-87)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  452	                        }
;  453	                    }
;  454	                }
L_84:
	LD	HL,1371705
	LD	E,60
	LD	BC,(IX+-36)
	LD	A,(IX+-33)
	CALL	__fadd
	LD	(IX+-36),BC
	LD	(IX+-33),A
	INC	(IX+-1)
L_85:
	LD	HL,(IX+-36)
	LD	E,(IX+-33)
	LD	BC,8388608
	LD	A,63
	CALL	__fcmp
	JP	P,L_86
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_83
L_86:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  455	                drawPerspectiveBox();
	CALL	_drawPerspectiveBox
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-137
	CALL	__istix
	POP	HL
	POP	BC
;  456	                gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-137
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  457	                graphingIsComplete = true; // this is so that it only plots the function once
	LD	(IX+-30),1
;  458	            }
;  459	
;  460	        } while (key != sk_2nd);
L_90:
	LD	A,(IX+-3)
	CP	A,54
	JR	NZ,L_89
;  461	    }
L_93:
;  462	
;  463	    gfx_End(); //stop the gfx
	CALL	_gfx_End
;  464	    prgm_CleanUp(); //clear the screen
;  465	    //end of program
;  466	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_parseRPN                           IMPORT  -----   function
;_mod                                IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_gfx_Line_NoClip                    IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_z_y                                IMPORT  -----   function
;_z_x                                IMPORT  -----   function
;_y_y                                IMPORT  -----   function
;_y_x                                IMPORT  -----   function
;_x_y                                IMPORT  -----   function
;_x_x                                IMPORT  -----   function
;_gfx_BlitRectangle                  IMPORT  -----   function
;_graph                              STATIC      3   variable
;_backspace                          IMPORT  -----   function
;_menuTitle                          STATIC      3   variable
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_equ                                STATIC     40   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_pitch_orig                         STATIC      4   variable
;_roll_orig                          STATIC      4   variable
;_yaw_orig                           STATIC      4   variable
;_malloc                             IMPORT  -----   function
;pRPN_g_h                             IX-98      4   variable
;pRPN_h_g                             IX-94      4   variable
;yyNodes                              IX-90      3   variable
;yxNodes                              IX-87      3   variable
;xyNodes                              IX-84      3   variable
;xxNodes                              IX-81      3   variable
;zy_a_b_c                             IX-78      4   variable
;zx_a_b_c                             IX-74      4   variable
;yy_a_b_c                             IX-70      4   variable
;yx_a_b_c                             IX-66      4   variable
;xy_a_b_c                             IX-62      4   variable
;xx_a_b_c                             IX-58      4   variable
;zy_a_b_c_100                         IX-54      3   variable
;zx_a_b_c_100                         IX-51      3   variable
;yy_a_b_c_100                         IX-48      3   variable
;yx_a_b_c_100                         IX-45      3   variable
;xy_a_b_c_100                         IX-42      3   variable
;xx_a_b_c_100                         IX-39      3   variable
;t                                    IX-36      4   variable
;key                                  IX-32      1   variable
;strWidth                             IX-31      1   variable
;graphingIsComplete                   IX-30      1   variable
;h                                    IX-29      4   variable
;g                                    IX-25      4   variable
;pitch                                IX-21      4   variable
;roll                                 IX-17      4   variable
;yaw                                  IX-13      4   variable
;main                                  IX-9      1   variable
;mode                                  IX-8      1   variable
;yyNode                                IX-7      1   variable
;yxNode                                IX-6      1   variable
;xyNode                                IX-5      1   variable
;xxNode                                IX-4      1   variable
;key                                   IX-3      1   variable
;sel                                   IX-2      1   variable
;i                                     IX-1      1   variable


; Stack Frame Size: 143 (bytes)
;       Spill Code: -4 (instruction)


	SEGMENT STRSECT
L__7:
	DB	"R3 - 3D grapher for the TI84PCE"
	DB	0
L__8:
	DB	"f(x,y) = "
	DB	0
L__11:
	DB	"Enter equation "
	DB	0
L__12:
	DB	"Graph"
	DB	0
L__13:
	DB	"*"
	DB	0
L__24:
	DB	"f(x,y) = "
	DB	0
L__25:
	DB	"|"
	DB	0
L__30:
	DB	"ln"
	DB	0
L__31:
	DB	"log"
	DB	0
L__32:
	DB	"0"
	DB	0
L__33:
	DB	"1"
	DB	0
L__34:
	DB	"4"
	DB	0
L__35:
	DB	"7"
	DB	0
L__36:
	DB	" "
	DB	0
L__37:
	DB	"sin"
	DB	0
L__38:
	DB	"x"
	DB	0
L__39:
	DB	"."
	DB	0
L__40:
	DB	"2"
	DB	0
L__41:
	DB	"5"
	DB	0
L__42:
	DB	"8"
	DB	0
L__43:
	DB	"cos"
	DB	0
L__44:
	DB	"y"
	DB	0
L__45:
	DB	"`"
	DB	0
L__46:
	DB	"3"
	DB	0
L__47:
	DB	"6"
	DB	0
L__48:
	DB	"9"
	DB	0
L__49:
	DB	"tan"
	DB	0
L__50:
	DB	"-"
	DB	0
L__51:
	DB	"+"
	DB	0
L__52:
	DB	"*"
	DB	0
L__53:
	DB	"/"
	DB	0
L__54:
	DB	"^"
	DB	0
L__55:
	DB	0
L__65:
	DB	"x"
	DB	0
L__66:
	DB	"y"
	DB	0
L__67:
	DB	"z"
	DB	0
	SEGMENT CODE
;  467	
;  468	//used to calculate the position of points in the 3d world and translate them into 2d coordinates to draw onto the screen
;  469	//when using these, ALWAYS type (a,b,c) as the arguments of the function.
;  470	double x_x(double a, double b, double c)
;  471	{
_x_x:
	LD	HL,-11
	CALL	__frameset
;  472	    return (cos(c) * cos(a)) - (sin(c) * sin(a) * sin(b));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-4),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-1),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-7)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-1)
	LD	HL,BC
	LD	BC,(IX+-4)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  473	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _x_x ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -4 (instruction)


;  474	
;  475	double x_y(double a, double b, double c)
;  476	{
_x_y:
	LD	HL,-11
	CALL	__frameset
;  477	    return (cos(c) * sin(a) * sin(b)) + (sin(c) * cos(a));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fadd
	LD	E,A
	LD	HL,BC
;  478	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _x_y ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -4 (instruction)


;  479	
;  480	double y_x(double a, double b, double c)
;  481	{
_y_x:
	LD	HL,-14
	CALL	__frameset
;  482	    return (-1 * cos(c) * sin(a)) - (sin(c) * cos(a) * sin(b));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	B,A
	LD	(IX+-13),BC
	CALL	_sin
	LD	BC,(IX+-13)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-13),BC
	LD	(IX+-14),A
	CALL	_cos
	LD	BC,(IX+-13)
	LD	A,(IX+-14)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-10),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-13),BC
	CALL	_sin
	LD	BC,(IX+-13)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-10)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  483	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _y_x ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: -4 (instruction)


;  484	
;  485	double y_y(double a, double b, double c)
;  486	{
_y_y:
	LD	HL,-11
	CALL	__frameset
;  487	    return (cos(c) * cos(a) * sin(b)) - (sin(c) * sin(a));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  488	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _y_y ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -4 (instruction)


;  489	
;  490	double z_x(double a, double b, double c)
;  491	{
_z_x:
	LD	HL,-6
	CALL	__frameset
;  492	    return -1 * sin(c) * cos(b);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_sin
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-6),BC
	CALL	_cos
	LD	BC,(IX+-6)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
;  493	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _z_x ***************************
;Name                         Addr/Register   Size   Type
;_cos                                IMPORT  -----   function
;_sin                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: -4 (instruction)


;  494	
;  495	double z_y(double a, double b, double c)
;  496	{
_z_y:
	LD	HL,-4
	CALL	__frameset
;  497	    return cos(c) * cos(b);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-3),BC
	LD	(IX+-4),A
	CALL	_cos
	LD	BC,(IX+-3)
	LD	A,(IX+-4)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	HL,BC
;  498	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _z_y ***************************
;Name                         Addr/Register   Size   Type
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: -4 (instruction)


;  499	
;  500	//proper modulus function
;  501	//the % operator only works with integers
;  502	//and the fmod() function can't handle negative numbers properly
;  503	double mod(double a, double N)
;  504	{
_mod:
	CALL	__frameset0
;  505	    return a - N * floor(a / N);
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  506	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mod ***************************
;Name                         Addr/Register   Size   Type
;_floor                              IMPORT  -----   function
;N                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -4 (instruction)


	SEGMENT BSS
_text:
	DS	15
_r:
	DS 4*1
_aa:
	DS 4*1
_bb:
	DS 4*1
_c:
	DS	40
_d:
	DS	3
_e:
	DS	3
	SEGMENT STRSECT
L__89:
	DB	" "
	DB	0
	SEGMENT DATA
_w:
	DW24	L__89
	SEGMENT BSS
_tokens:
	DS	3
_val:
	DS	96
_size:
	DS	3
_OP:
	DS	99
;  507	
;  508	//global vars
;  509	char text[15];
;  510	float r;
;  511	float aa;
;  512	float bb;
;  513	char c[40];
;  514	char *d;
;  515	char *e, *w = " ";
;  516	char *tokens;
;  517	
;  518	double val[24];
;  519	int size;
;  520	
;  521	typedef struct opStack
;  522	{
;  523	    char op[96];
;  524	    int size;
;  525	} opStack;
;  526	opStack OP;
	SEGMENT CODE
;  527	
;  528	char *tokenize(char *input)
;  529	{
_tokenize:
	LD	HL,-3
	CALL	__frameset
;  530	    int i = 0;
;  531	    char *output;
;  532	    output = strtok(input, ",");
	LD	BC,L__90
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;  533	    return output;
;  534	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _tokenize ***************************
;Name                         Addr/Register   Size   Type
;_strtok                             IMPORT  -----   function
;output                                IX-3      3   variable
;input                                 IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -4 (instruction)


	SEGMENT STRSECT
L__90:
	DB	","
	DB	0
	SEGMENT CODE
;  535	
;  536	//pushes the argument to the stack
;  537	void pushRPN(double v)
;  538	{
_pushRPN:
	CALL	__frameset0
;  539	    val[size++] = v;
	LD	HL,(_size)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_val
	ADD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	LD	BC,(_size)
	INC	BC
	LD	(_size),BC
;  540	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pushRPN ***************************
;Name                         Addr/Register   Size   Type
;_size                               STATIC      3   variable
;_val                                STATIC     96   variable
;v                                     IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -4 (instruction)


;  541	//returns the value of the element on top of the stack and removes it
;  542	double popRPN(void)
;  543	{
_popRPN:
;  544	    return val[--size];
	LD	BC,(_size)
	DEC	BC
	LD	(_size),BC
	LD	HL,(_size)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_val
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
;  545	}
	RET	


;**************************** _popRPN ***************************
;Name                         Addr/Register   Size   Type
;_val                                STATIC     96   variable
;_size                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -4 (instruction)


;  546	//THIS FINALLY WORKS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
;  547	double parseRPN(char *s, double X, double Y) //THE REVERSE POLISH NOTATION PARSER IS HERE
;  548	{
_parseRPN:
	LD	HL,-9
	CALL	__frameset
;  549	    char tok;
;  550	    double a, b; //declare my vars
;  551	    size = 0; //set stack size to 0;
	LD	BC,0
	LD	(_size),BC
;  552	    strcpy(c, s); //copy the string s to c, so we can mess with c all we want without damaging s
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,_c
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  553	    for(tokens = strtok(c, w); tokens; tokens = strtok(NULL, w)) //chop c into tokens, separated by spaces as delims
	LD	BC,(_w)
	PUSH	BC
	LD	BC,_c
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(_tokens),HL
	JR	L_140
L_138:
;  554	    {
;  555	        //for each token we will:
;  556	        a = strtod(tokens,&e); //convert it to a number and store it in a
	LD	BC,_e
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strtod
	POP	BC
	POP	BC
	LD	(IX+-9),HL
	LD	(IX+-6),E
;  557	        tok = *tokens;
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	(IX+-5),A
;  558	        
;  559	        if (e > tokens && tok != '+' && tok != '-' && tok != '/' && tok != '*' && tok != '^' && tok != 'x' && tok != 'y' ) //stupid
	LD	BC,(_e)
	LD	HL,(_tokens)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_137
	LD	A,(IX+-5)
	CP	A,43
	JR	Z,L_137
	LD	A,(IX+-5)
	CP	A,45
	JR	Z,L_137
	LD	A,(IX+-5)
	CP	A,47
	JR	Z,L_137
	LD	A,(IX+-5)
	CP	A,42
	JR	Z,L_137
	LD	A,(IX+-5)
	CP	A,94
	JR	Z,L_137
	LD	A,(IX+-5)
	CP	A,120
	JR	Z,L_137
	LD	A,(IX+-5)
	CP	A,121
	JR	Z,L_137
;  560	        {
;  561	            pushRPN(a); //push a to the stack if the token was an actual number
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  562	        }
;  563	        else if (tok == 'x')
	JR	L_139
L_137:
	LD	A,(IX+-5)
	CP	A,120
	JR	NZ,L_135
;  564	        {
;  565	            pushRPN(X); //push the value of argument X to stack
	LD	C,(IX+12)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  566	        }
;  567	        else if (tok == 'y')
	JR	L_139
L_135:
	LD	A,(IX+-5)
	CP	A,121
	JR	NZ,L_133
;  568	        {
;  569	            pushRPN(Y); //push argument Y to stack
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  570	        }
;  571	#define binop(x)  b = popRPN(), a = popRPN(), pushRPN(x) //the binary operators: takes top 2 numbers on stack, evaluates them, then pushes the result back to stack
;  572	        else if (tok == '+')
	JR	L_139
L_133:
	LD	A,(IX+-5)
	CP	A,43
	JR	NZ,L_131
;  573	        {
;  574	            binop(a + b);
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-9),BC
	LD	(IX+-6),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	A,(IX+-6)
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  575	        }
;  576	        else if (tok == '-')
	JR	L_139
L_131:
	LD	A,(IX+-5)
	CP	A,45
	JR	NZ,L_129
;  577	        {
;  578	            binop(a - b);
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-9),BC
	LD	(IX+-6),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	A,(IX+-6)
	CALL	__fsub
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  579	        }
;  580	        else if (tok == '*')
	JR	L_139
L_129:
	LD	A,(IX+-5)
	CP	A,42
	JR	NZ,L_127
;  581	        {
;  582	            binop(a * b);
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-9),BC
	LD	(IX+-6),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	A,(IX+-6)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  583	        }
;  584	        else if (tok == '/')
	JR	L_139
L_127:
	LD	A,(IX+-5)
	CP	A,47
	JR	NZ,L_125
;  585	        {
;  586	            binop(a / b);
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-9),BC
	LD	(IX+-6),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	A,(IX+-6)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  587	        }
;  588	        else if (tok == '^')
	JR	L_139
L_125:
	LD	A,(IX+-5)
	CP	A,94
	JR	NZ,L_123
;  589	        {
;  590	            binop(pow(a, b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	(IX+-9),HL
	LD	(IX+-6),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_pow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  591	        }
;  592	#undef binop
;  593	#define monop(x) b = popRPN(), pushRPN(x); //mono operators: takes top number on stack, evaluates it, then pushes the result back to the stack
;  594	        else if (strcmp(tokens,"sin") == 0)
	JR	L_139
L_123:
	LD	BC,L__109
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_121
;  595	        {
;  596	            monop(sin(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  597	        }
;  598	        else if (strcmp(tokens,"cos") == 0)
	JR	L_139
L_121:
	LD	BC,L__111
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_119
;  599	        {
;  600	            monop(cos(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  601	        }
;  602	        else if (strcmp(tokens,"tan") == 0)
	JR	L_139
L_119:
	LD	BC,L__113
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_117
;  603	        {
;  604	            monop(tan(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_tan
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  605	        }
;  606	        else if (strcmp(tokens,"ln") == 0)
	JR	L_139
L_117:
	LD	BC,L__115
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_115
;  607	        {
;  608	            monop(tan(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_tan
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  609	        }
;  610	        else if (strcmp(tokens,"log") == 0)
	JR	L_139
L_115:
	LD	BC,L__117
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_139
;  611	        {
;  612	            monop(tan(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_tan
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  613	        }
;  614	#undef monop
;  615	    }
L_139:
	LD	BC,(_w)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(_tokens),HL
L_140:
	LD	BC,0
	LD	HL,(_tokens)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_138
;  616	    return popRPN();
	CALL	_popRPN
;  617	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _parseRPN ***************************
;Name                         Addr/Register   Size   Type
;_tan                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;_sin                                IMPORT  -----   function
;_strcmp                             IMPORT  -----   function
;_pow                                IMPORT  -----   function
;_popRPN                             IMPORT  -----   function
;_pushRPN                            IMPORT  -----   function
;_e                                  STATIC      3   variable
;_strtod                             IMPORT  -----   function
;_tokens                             STATIC      3   variable
;_w                                  STATIC      3   variable
;_strtok                             IMPORT  -----   function
;_c                                  STATIC     40   variable
;_strcpy                             IMPORT  -----   function
;_size                               STATIC      3   variable
;a                                     IX-9      4   variable
;tok                                   IX-5      1   variable
;b                                     IX-4      4   variable
;Y                                    IX+15      4   parameter
;X                                     IX+9      4   parameter
;s                                     IX+6      3   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: -4 (instruction)


	SEGMENT STRSECT
L__109:
	DB	"sin"
	DB	0
L__111:
	DB	"cos"
	DB	0
L__113:
	DB	"tan"
	DB	0
L__115:
	DB	"ln"
	DB	0
L__117:
	DB	"log"
	DB	0
	SEGMENT CODE
;  618	
;  619	void pushOP(char op)
;  620	{
_pushOP:
	CALL	__frameset0
;  621	    OP.op[OP.size++] = op;
	LD	HL,(_OP+96)
	LD	BC,_OP
	ADD	HL,BC
	LD	A,(IX+6)
	LD	(HL),A
	LD	BC,(_OP+96)
	INC	BC
	LD	(_OP+96),BC
;  622	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pushOP ***************************
;Name                         Addr/Register   Size   Type
;_OP                                 STATIC     99   variable
;op                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -4 (instruction)


;  623	double popOP(void)
;  624	{
_popOP:
;  625	    return OP.op[--OP.size];
	LD	BC,(_OP+96)
	DEC	BC
	LD	(_OP+96),BC
	LD	HL,(_OP+96)
	LD	BC,_OP
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	A,H
	LD	BC,HL
	CALL	__ltof
	LD	E,A
	LD	HL,BC
;  626	}
	RET	


;**************************** _popOP ***************************
;Name                         Addr/Register   Size   Type
;_OP                                 STATIC     99   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -4 (instruction)


;  627	void shunt(void)
;  628	{
_shunt:
;  629	
;  630	}
	RET	


;**************************** _shunt ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: -4 (instruction)


;  631	char* backspace(char* str)
;  632	{
_backspace:
	LD	HL,-3
	CALL	__frameset
;  633	    int i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  634	    while(str[i] != '\0')
	JR	L_148
L_149:
;  635	    {
;  636	        i++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  637	
;  638	    }
L_148:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_149
;  639	    str[i-1] = '\0';
	LD	BC,(IX+-3)
	DEC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
;  640	    return str;
	LD	HL,(IX+6)
;  641	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _backspace ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -4 (instruction)


	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_BlitRectangle:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine_NoClip:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_Line_NoClip:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _strcmp:ROM
	XREF _strtok:ROM
	XREF _strcat:ROM
	XREF _strcpy:ROM
	XREF _strtod:ROM
	XREF _malloc:ROM
	XREF _floor:ROM
	XREF _pow:ROM
	XREF _tan:ROM
	XREF _sin:ROM
	XREF _cos:ROM
	XREF _os_GetCSC:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XDEF _backspace
	XDEF _shunt
	XDEF _popOP
	XDEF _pushOP
	XDEF _parseRPN
	XDEF _popRPN
	XDEF _pushRPN
	XDEF _tokenize
	XDEF _OP
	XDEF _size
	XDEF _val
	XDEF _tokens
	XDEF _w
	XDEF _e
	XDEF _d
	XDEF _c
	XDEF _bb
	XDEF _aa
	XDEF _r
	XDEF _text
	XDEF _mod
	XDEF _z_y
	XDEF _z_x
	XDEF _y_y
	XDEF _y_x
	XDEF _x_y
	XDEF _x_x
	XDEF _main
	XDEF _equ
	XDEF _menuTitle
	XDEF _graph
	END
