; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_text:
	DS	15
_r:
	DS 4*1
_aa:
	DS 4*1
_bb:
	DS 4*1
_c:
	DS	40
_d:
	DS	3
_e:
	DS	3
	SEGMENT STRSECT
L__0:
	DB	" "
	DB	0
	SEGMENT DATA
_w:
	DW24	L__0
	SEGMENT BSS
_tokens:
	DS	3
_val:
	DS	96
_size:
	DS	3
_OP:
	DS	99
;    1	/*	The AMAZING 3D grapher for the TI84+CE
;    2	 *by gluu
;    3	 *currently in a very early alpha stage
;    4	 *like, i don't even have user input
;    5	 *DONE! Mathematical expression parser
;    6	 *DONE! better way of handling perspective
;    7	 *TODO: fix bug regarding wrapping of screen when graphing
;    8	 *TODO: shunting yard algorithm
;    9	 *TODO: possible cylindrical and spherical plots?
;   10	 *
;   11	 *Based on the 3D parametric grapher on desmos
;   12	 *
;   13	 *Please bear with parts of code that are redundant or inefficient.
;   14		I don't care enough to fix them for now.
;   15	 *
;   16	 * I think I fixed all indentation and formatting
;   17	 *	
;   18	 */
;   19	
;   20	
;   21	//headers
;   22	#include <stdbool.h>
;   23	#include <stddef.h>
;   24	#include <stdint.h>
;   25	#include <tice.h>
;   26	
;   27	//std headers
;   28	#include <math.h>
;   29	#include <stdio.h>
;   30	#include <stdlib.h>
;   31	#include <string.h>
;   32	
;   33	
;   34	/* CE Keypad C Library */
;   35	#include <keypadc.h>
;   36	#include <graphx.h>
;   37	#include <fileioc.h>
;   38	
;   39	
;   40	
;   41	//C is a dumb language 
;   42	//why do i have to define my functions up here and then actually write them all the way down there after i write main()
;   43	//still better than writing assembly code tho
;   44	void printText(const char *text, uint8_t x, uint8_t y);
;   45	
;   46	void fillScreen(uint8_t color);
;   47	
;   48	double x_x(double a, double b, double c);
;   49	
;   50	double x_y(double a, double b, double c);
;   51	
;   52	double y_x(double a, double b, double c);
;   53	
;   54	double y_y(double a, double b, double c);
;   55	
;   56	double z_x(double a, double b, double c);
;   57	
;   58	double z_y(double a, double b, double c);
;   59	
;   60	double function(double x, double y);
;   61	
;   62	double mod(double a, double b);
;   63	
;   64	char *tokenize(char *input);
;   65	
;   66	char* backspace(char* str);
;   67	
;   68	//global vars
;   69	char text[15];
;   70	float r;
;   71	float aa;
;   72	float bb;
;   73	char c[40];
;   74	char *d;
;   75	char *e, *w = " ";
;   76	char *tokens;
;   77	char *floatToStr(float arg);
;   78	typedef struct node
;   79	{
;   80		double val;
;   81		struct Node* next;
;   82	} node;
;   83	
;   84	double val[24];
;   85	int size;
;   86	
;   87	typedef struct opStack
;   88	{
;   89	    char op[96];
;   90	    int size;
;   91	} opStack;
;   92	opStack OP;
	SEGMENT CODE
;   93	
;   94	void initRPN(void);
;   95	
;   96	void pushRPN(double val);
;   97	
;   98	double popRPN(void);
;   99	
;  100	double parseRPN(char *s, double X, double Y);
;  101	
;  102	void shunt(void);
;  103	
;  104	
;  105	//main function
;  106	//this is what gets run when the program starts
;  107	void main(void)
;  108	{
_main:
	LD	HL,-295
	CALL	__frameset
;  109	#define DELAY 250
;  110	    //initialize all the keymaps
;  111	    //I don't think all of them get used, but it's nice to have them anyways
;  112	    //feel free to delete the unused ones if you really want to save a few bytes
;  113	    kb_key_t key1;
;  114	    kb_key_t key2;
;  115	    kb_key_t key3;
;  116	    kb_key_t key4;
;  117	    kb_key_t key5;
;  118	    kb_key_t key6;
;  119	    kb_key_t key7;
;  120	
;  121	    //initialize strings
;  122	    const char *graph = "Graphing...";
	LD	BC,L__1
	LD	(IX+-35),BC
;  123	    const char *menuTitle = "Main Menu";
	LD	BC,L__2
	LD	(IX+-122),BC
;  124	
;  125	    //declare variables and some constants
;  126	    //uint8_t is the best thing ever
;  127	    //it's basically an unsigned 8bit integer that takes up less space than an int
;  128	    //but functions the same as an int for all intents and purposes (except negatives)
;  129	    int8_t sel = -1; //used for menu selections
;  130	    int8_t cursorPos = 0;
;  131	    bool kill = false; //used to terminate program
;  132	    bool firstLoopIsComplete = false; //used to initialize graphx
	LD	(IX+-50),0
;  133	    bool graphingIsComplete = false; //used to plot points
	LD	(IX+-53),0
;  134	    bool lol3 = false; //used to draw the perspective changer
	LD	(IX+-32),0
;  135	    bool lol2 = false;
	LD	(IX+-94),0
;  136	    bool main = true;
	LD	(IX+-40),1
;  137	    bool keyRecentlyPressed = false;
	LD	(IX+-13),0
;  138	    uint8_t mode = 0; //used for menu selections
	LD	(IX+-36),0
;  139	    uint8_t i = 0;
;  140	    double t; //parameter for plotting points
;  141	    double a = -2.3; //yaw
	LD	BC,1258291
	LD	(IX+-4),BC
	LD	A,192
	LD	(IX+-1),A
;  142	    double b = .6; //roll
	LD	BC,1677722
	LD	(IX+-8),BC
	LD	A,63
	LD	(IX+-5),A
;  143	    double c = 0; //pitch; this never changes since i don't want people to mess with the rotation of the screen
	LD	BC,0
	LD	(IX+-12),BC
	XOR	A,A
	LD	(IX+-9),A
;  144	    double a1 = a; //dummy variables we'll use later
	LD	BC,1258291
	LD	(IX+-25),BC
	LD	A,192
	LD	(IX+-22),A
;  145	    double b1 = b;
	LD	BC,1677722
	LD	(IX+-29),BC
	LD	A,63
	LD	(IX+-26),A
;  146	    double c1 = c;
;  147	    double g; //g and h are used for calculating the points to plot
;  148	    double _g; //_g and _h are unused for now, keeping it as legacy in case i might need them someday
;  149	    double h;
;  150	    double _h;
;  151	    const double s = 15; //scale of the graph
;  152	    const double s2 = 3.75; //how much of the graph gets shown
;  153	    const double n = 10; //resolution of the grid of the graph is (higher = more detail)
;  154	    double dx = 1 / (n * (1 +
;  155	                          n)); //degree of precision when plotting; higher values mean less precise plotting. This value should be called dt to be mathematically correct, but I don't feel like changing it now
;  156	    double d1;
;  157	    double d2;
;  158	
;  159	    double aaa;
;  160	//    char equtest[40] = " x x * y y * - 4 /";
;  161	    char equ[40] = "x sin";
	LEA	DE,IX+-93
;  162	//    int xxNodes[128]; //create the node arrays
;  163	//    int xyNodes[128];
;  164	//    int yxNodes[128];
;  165	//    int yyNodes[128];
;  166	    uint8_t *xxNodes; //create the node arrays
;  167	    uint8_t *xyNodes;
;  168	    uint8_t *yxNodes;
;  169	    uint8_t *yyNodes;
;  170	
;  171		xxNodes = (uint8_t*)malloc(sizeof(uint8_t)*128);
	LD	BC,128
	PUSH	BC
	LD	HL,_0temp0
	LD	BC,40
	LDIR	
	CALL	_malloc
	POP	BC
	LEA	IY,IX+-128
;  172		xyNodes = (uint8_t*)malloc(sizeof(uint8_t)*128);
	LD	BC,128
	PUSH	BC
	LD	(IY+-6),HL
	CALL	_malloc
	POP	BC
	LEA	IY,IX+-128
;  173		yxNodes = (uint8_t*)malloc(sizeof(uint8_t)*128);
	LD	BC,128
	PUSH	BC
	LD	(IY+-9),HL
	CALL	_malloc
	POP	BC
	LEA	IY,IX+-128
;  174		yyNodes = (uint8_t*)malloc(sizeof(uint8_t)*128);
	LD	BC,128
	PUSH	BC
	LD	(IY+-12),HL
	CALL	_malloc
	POP	BC
	LEA	IY,IX+-128
;  175	
;  176	    //------program actually starts here------\\
;  177	
;  178	    prgm_CleanUp(); //clear the screen
;  179	
;  180	    gfx_Begin(gfx_8bpp); //initialize advanced graphx
	LD	BC,39
	PUSH	BC
	LD	(IY+-15),HL
	CALL	_gfx_Begin
	POP	BC
;  181	    gfx_SetDraw(gfx_buffer);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  182	
;  183	    gfx_SetTextFGColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  184	
;  185	
;  186	    //testing purposes
;  187	//    for (t = 0; t < 1 && kb_Data[kb_group_1] != kb_2nd; t += .1)
;  188	//    for(tokens = strtok(equtest, " "); tokens != NULL; tokens = strtok(NULL," "))
;  189	//    {
;  190	//    	g = 2*strtod(tokens,&e);
;  191	//    	h = 8;
;  192	//    	floatToStr(g);
;  193	//    	if (e > tokens && *tokens != '+') gfx_PrintStringXY(text, 12, 21 + (9 * i));
;  194	////    	floatToStr(parseRPN(equ,g,h));
;  195	//    	gfx_PrintStringXY(tokens, 150, 21 + (9 * i));
;  196	//    	i++;
;  197	//    }
;  198	
;  199	
;  200	
;  201	    gfx_PrintStringXY("R3 - 3D grapher for the TI84PCE", 12, 12); //print title text
	LD	BC,12
	PUSH	BC
	PUSH	BC
	LD	BC,L__3
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  202	    gfx_PrintStringXY("f(x,y) = ", 12, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  203	    gfx_PrintStringXY(equ,98,21);
	LD	BC,21
	PUSH	BC
	LD	BC,98
	PUSH	BC
	PEA	IX+-93
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  204	//    gfx_PrintStringXY(text, 12, 21);
;  205	
;  206	//    gfx_PrintStringXY(text, 12, 30);
;  207	
;  208	    gfx_SwapDraw(); //update the screen
	CALL	_gfx_SwapDraw
;  209	
;  210	
;  211	    while (!os_GetCSC()); //wait for input
L_2:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_2
;  212	
;  213	    delay(DELAY);
	LD	BC,250
	PUSH	BC
	CALL	_delay
	POP	BC
;  214	    kb_Scan();
	CALL	_kb_Scan
;  215	    sel = 0;
	LD	(IX+-31),0
;  216	    MAIN:do
L_23:
;  217	    {
;  218			gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  219			gfx_PrintStringXY(menuTitle, 160-gfx_GetStringWidth(menuTitle),12);
	LD	BC,12
	PUSH	BC
	LD	BC,(IX+-122)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-122)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  220			gfx_PrintStringXY("1. Enter equation ", 12, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  221			gfx_PrintStringXY("2. Graph", 12, 30);
	LD	BC,30
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  222			gfx_PrintStringXY("*",4,21+(sel*9));
	LD	A,(IX+-31)
	SEXT	HL
	LD	L,(IX+-31)
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,HL
	LEA	BC,IY+21
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  223			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  224			if (keyRecentlyPressed == true)
	LD	A,(IX+-13)
	CP	A,1
	JR	NZ,L_6
;  225			{
;  226				delay(150); //delay of 150ms; this prevents keys from being stuck too long
	LD	BC,150
	PUSH	BC
	CALL	_delay
	POP	BC
;  227				keyRecentlyPressed = false;
	LD	(IX+-13),0
;  228			}
L_6:
;  229	    	kb_Scan();
	CALL	_kb_Scan
;  230	    	key6 = kb_Data[kb_group_6];
	LD	A,(16056348)
	LD	(IX+-52),A
;  231	    	key7 = kb_Data[kb_group_7]; //load the group 7 registers
	LD	A,(16056350)
	LD	(IX+-51),A
;  232	    	switch(key7)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__10:
	LD	DE,8
	OR	A,A
	SBC	HL,DE
	JR	Z,L_7
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L_15
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_10
	JR	L_15
;  233	    	{
;  234	    		case kb_Up:
L_7:
;  235	    			if (sel > 0)
	XOR	A,A
	CP	A,(IX+-31)
	JP	P,L_9
;  236	    			{
;  237	    				--sel;
	DEC	(IX+-31)
;  238	    			}
L_9:
;  239	    			firstLoopIsComplete = false;
	LD	(IX+-50),0
;  240	    			keyRecentlyPressed = true;
	LD	(IX+-13),1
;  241	    			break;
	JR	L_15
;  242	    		case kb_Down:
L_10:
;  243	    			if (sel < 1)
	LD	A,(IX+-31)
	CP	A,1
	JP	P,L__155
	JP	PE,L_12
	JR	L__156
L__155:
	JP	PO,L_12
L__156:
;  244	    			{
;  245	        			++sel;
	INC	(IX+-31)
;  246	    			}
L_12:
;  247	    			firstLoopIsComplete = false;
	LD	(IX+-50),0
;  248	    			keyRecentlyPressed = true;
	LD	(IX+-13),1
;  249					break;
;  250	    		default:
;  251	    			break;
;  252	    	}
L_15:
;  253	    	if (!lol2)
	LD	A,(IX+-94)
	OR	A,A
	JR	NZ,L_21
;  254	    	{
;  255	    		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  256	    		lol2 = true;
	LD	(IX+-94),1
;  257	    	}
L_21:
;  258	    	if (key6 == kb_Enter && main)
	LD	A,(IX+-52)
	CP	A,1
	JR	NZ,L_24
	LD	A,(IX+-40)
	OR	A,A
	JR	Z,L_24
;  259	    	{
;  260	    		main = false;
	LD	(IX+-40),0
;  261	    		if (sel == 0)
	LD	A,(IX+-31)
	OR	A,A
	JR	NZ,L_19
;  262	    		{
;  263	    			delay(150);
	LD	BC,150
	PUSH	BC
	CALL	_delay
	POP	BC
;  264	    			mode = 1;
	LD	(IX+-36),1
;  265	    		}
;  266	    		else if (sel == 1)
	JR	L_24
L_19:
	LD	A,(IX+-31)
	CP	A,1
	JR	NZ,L_24
;  267	    		{
;  268	    			mode = 2;
	LD	(IX+-36),2
;  269	    		}
;  270	    	}
;  271	
;  272	    }
;  273	    while(main && kb_Data[kb_group_1] != kb_2nd);
L_24:
	LD	A,(IX+-40)
	OR	A,A
	JR	Z,L_86
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_23
L_86:
;  274	    if (mode == 1)
	LD	A,(IX+-36)
	CP	A,1
	JR	NZ,L_131
;  275	    {
;  276	    	//quite possibly the most annoying thing to code
;  277	    	do
L_83:
;  278	    	{
;  279				gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  280				gfx_PrintStringXY("f(x,y) = ", 12, 21);
	LD	BC,21
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,L__23
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  281				gfx_PrintStringXY(equ,64,21);
	LD	BC,21
	PUSH	BC
	LD	BC,64
	PUSH	BC
	PEA	IX+-93
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  282				gfx_PrintStringXY("|", 64+gfx_GetStringWidth(equ),21);
	LD	BC,21
	PUSH	BC
	PEA	IX+-93
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+64
	PUSH	BC
	LD	BC,L__24
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  283				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  284				if (keyRecentlyPressed == true)
	LD	A,(IX+-13)
	CP	A,1
	JR	NZ,L_26
;  285				{
;  286					delay(DELAY); //delay of 150ms; this prevents keys from being stuck too long
	LD	BC,250
	PUSH	BC
	CALL	_delay
	POP	BC
;  287					keyRecentlyPressed = false;
	LD	(IX+-13),0
;  288				}
L_26:
;  289				kb_Scan();
	CALL	_kb_Scan
;  290				key1 = kb_Data[kb_group_1];
	LD	A,(16056338)
	LD	(IX+-112),A
;  291				key2 = kb_Data[kb_group_2];
	LD	A,(16056340)
	LD	(IX+-113),A
;  292				key3 = kb_Data[kb_group_3];
	LD	A,(16056342)
	LD	(IX+-114),A
;  293				key4 = kb_Data[kb_group_4];
	LD	A,(16056344)
	LD	(IX+-115),A
;  294				key5 = kb_Data[kb_group_5];
	LD	A,(16056346)
	LD	(IX+-116),A
;  295				key6 = kb_Data[kb_group_6];
	LD	A,(16056348)
	LD	(IX+-52),A
;  296				key7 = kb_Data[kb_group_7];
;  297				//Welcome to Switch-Statement City! Population: 0, cuz no one wants to live in this atrocious town
;  298				//Hope you enjoy your stay!
;  299				switch(key1)
	LD	A,(IX+-112)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__27:
	LD	DE,32
	OR	A,A
	SBC	HL,DE
	JR	Z,L_43
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	JR	C,L__29
	LD	DE,8
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_43
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L__32
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	C,L_43
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_43
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	DE,L__26-3
	ADD	HL,DE
	LD	HL,(HL)
	JP	(HL)
L__26:
	DW24	L_27	

	DW24	L_28	

	DW24	L_43	

	DW24	L_43	

L__32:
	LD	DE,16
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_43
	JR	L_43
L__29:
	LD	DE,128
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_34
	LD	HL,128
	OR	A,A
	SBC	HL,BC
	JR	C,L_43
	LD	DE,64
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_43
	JR	L_43
;  300				{
;  301					case kb_Graph:
L_27:
;  302						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  303						break;
	JR	L_43
;  304					case kb_Trace:
L_28:
;  305						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  306						break;
	JR	L_43
;  307					case kb_Zoom:
;  308						break;
;  309					case kb_Window:
;  310						break;
;  311					case kb_Yequ:
;  312						break;
;  313					case kb_2nd:
;  314						break;
;  315					case kb_Mode:
;  316						break;
;  317					case kb_Del:
L_34:
;  318						backspace(equ);
	PEA	IX+-93
	CALL	_backspace
	POP	BC
;  319						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  320						break;
;  321					default:
;  322						break;
;  323				}
L_43:
;  324				switch(key2)
	LD	A,(IX+-113)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__38:
	LD	DE,32
	OR	A,A
	SBC	HL,DE
	JR	Z,L_53
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	JR	C,L__40
	LD	DE,8
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_37
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L__43
	LD	DE,4
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_36
	JR	L_53
L__43:
	LD	DE,16
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_53
	JR	L_53
L__40:
	LD	DE,128
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_53
	LD	HL,128
	OR	A,A
	SBC	HL,BC
	JR	C,L_53
	LD	DE,64
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_53
	JR	L_53
;  325				{
;  326					case kb_Ln:
L_36:
;  327						strcat(equ,"ln");
	LD	BC,L__47
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  328						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  329						break;
	JR	L_53
;  330					case kb_Log:
L_37:
;  331						strcat(equ,"log");
	LD	BC,L__48
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  332						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  333						break;
;  334					case kb_Square:
;  335						break;
;  336					case kb_Recip:
;  337						break;
;  338					case kb_Math:
;  339						break;
;  340					case kb_Alpha:
;  341						break;
;  342					default:
;  343						break;
;  344				}
L_53:
;  345				switch(key3)
	LD	A,(IX+-114)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__50:
	LD	DE,32
	OR	A,A
	SBC	HL,DE
	JR	Z,L_49
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	JR	C,L__52
	LD	DE,8
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_47
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L__55
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	C,L_63
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_63
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	DE,L__49-3
	ADD	HL,DE
	LD	HL,(HL)
	JP	(HL)
L__49:
	DW24	L_44	

	DW24	L_45	

	DW24	L_63	

	DW24	L_46	

L__55:
	LD	DE,16
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_48
	JR	L_63
L__52:
	LD	DE,128
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_51
	LD	HL,128
	OR	A,A
	SBC	HL,BC
	JR	C,L_63
	LD	DE,64
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_50
	JR	L_63
;  346				{
;  347					case kb_0:
L_44:
;  348						strcat(equ,"0");
	LD	BC,L__61
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  349						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  350						break;
	JR	L_63
;  351					case kb_1:
L_45:
;  352						strcat(equ,"1");
	LD	BC,L__62
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  353						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  354						break;
	JR	L_63
;  355					case kb_4:
L_46:
;  356						strcat(equ,"4");
	LD	BC,L__63
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  357						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  358						break;
	JR	L_63
;  359					case kb_7:
L_47:
;  360						strcat(equ,"7");
	LD	BC,L__64
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  361						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  362						break;
	JR	L_63
;  363					case kb_Comma:
L_48:
;  364						strcat(equ," ");
	LD	BC,L__65
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  365						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  366						break;
	JR	L_63
;  367					case kb_Sin:
L_49:
;  368						strcat(equ,"sin");
	LD	BC,L__66
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  369						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  370						break;
	JR	L_63
;  371					case kb_Apps:
L_50:
;  372						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  373						break;
	JR	L_63
;  374					case kb_GraphVar:
L_51:
;  375						strcat(equ,"x");
	LD	BC,L__67
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  376						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  377						break;
;  378					default:
;  379						break;
;  380				}
L_63:
;  381				switch(key4)
	LD	A,(IX+-115)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__69:
	LD	DE,32
	OR	A,A
	SBC	HL,DE
	JR	Z,L_59
	LD	HL,32
	OR	A,A
	SBC	HL,BC
	JR	C,L__71
	LD	DE,8
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_57
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L__74
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	C,L_72
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_72
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	DE,L__68-3
	ADD	HL,DE
	LD	HL,(HL)
	JP	(HL)
L__68:
	DW24	L_54	

	DW24	L_55	

	DW24	L_72	

	DW24	L_56	

L__74:
	LD	DE,16
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_58
	JR	L_72
L__71:
	LD	DE,128
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_61
	LD	HL,128
	OR	A,A
	SBC	HL,BC
	JR	C,L_72
	LD	DE,64
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_60
	JR	L_72
;  382				{
;  383					case kb_DecPnt:
L_54:
;  384						strcat(equ,".");
	LD	BC,L__80
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  385						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  386						break;
	JR	L_72
;  387					case kb_2:
L_55:
;  388						strcat(equ,"2");
	LD	BC,L__81
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  389						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  390						break;
	JR	L_72
;  391					case kb_5:
L_56:
;  392						strcat(equ,"5");
	LD	BC,L__82
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  393						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  394						break;
	JR	L_72
;  395					case kb_8:
L_57:
;  396						strcat(equ,"8");
	LD	BC,L__83
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  397						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  398						break;
	JR	L_72
;  399					case kb_LParen:
L_58:
;  400						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  401						break;
	JR	L_72
;  402					case kb_Cos:
L_59:
;  403						strcat(equ,"cos");
	LD	BC,L__84
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  404						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  405						break;
	JR	L_72
;  406					case kb_Prgm:
L_60:
;  407						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  408						break;
	JR	L_72
;  409					case kb_Stat:
L_61:
;  410						strcat(equ,"y");
	LD	BC,L__85
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  411						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  412						break;
;  413					default:
;  414						break;
;  415				}
L_72:
;  416				switch(key5)
	LD	A,(IX+-116)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__87:
	LD	DE,16
	OR	A,A
	SBC	HL,DE
	JR	Z,L_68
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	JR	C,L__89
	LD	DE,8
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_67
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L_81
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	C,L_81
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_81
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	DE,L__86-3
	ADD	HL,DE
	LD	HL,(HL)
	JP	(HL)
L__86:
	DW24	L_64	

	DW24	L_65	

	DW24	L_81	

	DW24	L_66	

L__89:
	LD	DE,64
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_70
	LD	HL,64
	OR	A,A
	SBC	HL,BC
	JR	C,L_81
	LD	DE,32
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_69
	JR	L_81
;  417				{
;  418					case kb_Chs:
L_64:
;  419						strcat(equ,"`");
	LD	BC,L__97
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  420						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  421						break;
	JR	L_81
;  422					case kb_3:
L_65:
;  423						strcat(equ,"3");
	LD	BC,L__98
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  424						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  425						break;
	JR	L_81
;  426					case kb_6:
L_66:
;  427						strcat(equ,"6");
	LD	BC,L__99
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  428						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  429						break;
	JR	L_81
;  430					case kb_9:
L_67:
;  431						strcat(equ,"9");
	LD	BC,L__100
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  432						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  433						break;
	JR	L_81
;  434					case kb_RParen:
L_68:
;  435						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  436						break;
	JR	L_81
;  437					case kb_Tan:
L_69:
;  438						strcat(equ,"tan");
	LD	BC,L__101
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  439						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  440						break;
	JR	L_81
;  441					case kb_Vars:
L_70:
;  442						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  443						break;
;  444					default:
;  445						break;
;  446				}
L_81:
;  447				switch(key6)
	LD	A,(IX+-52)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__103:
	LD	DE,16
	OR	A,A
	SBC	HL,DE
	JR	Z,L_77
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	JR	C,L__105
	LD	DE,8
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_76
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L_84
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	C,L_84
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_84
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	DE,L__102-3
	ADD	HL,DE
	LD	HL,(HL)
	JP	(HL)
L__102:
	DW24	L_73	

	DW24	L_75	

	DW24	L_84	

	DW24	L_74	

L__105:
	LD	DE,64
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_79
	LD	HL,64
	OR	A,A
	SBC	HL,BC
	JR	C,L_84
	LD	DE,32
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	Z,L_78
	JR	L_84
;  448				{
;  449					case kb_Enter:
L_73:
;  450						main = true;
	LD	(IX+-40),1
;  451						mode = 0;
	LD	(IX+-36),0
;  452						delay(DELAY);
	LD	BC,250
	PUSH	BC
	CALL	_delay
	POP	BC
;  453						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  454						goto MAIN;
	JR	L_23
;  455	
;  456						break;
;  457					case kb_Sub:
L_74:
;  458						strcat(equ,"-");
	LD	BC,L__113
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  459						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  460						break;
	JR	L_84
;  461					case kb_Add:
L_75:
;  462						strcat(equ,"+");
	LD	BC,L__114
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  463						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  464						break;
	JR	L_84
;  465					case kb_Mul:
L_76:
;  466						strcat(equ,"*");
	LD	BC,L__115
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  467						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  468						break;
	JR	L_84
;  469					case kb_Div:
L_77:
;  470						strcat(equ,"/");
	LD	BC,L__116
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  471						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  472						break;
	JR	L_84
;  473					case kb_Power:
L_78:
;  474						strcat(equ,"^");
	LD	BC,L__117
	PUSH	BC
	PEA	IX+-93
	CALL	_strcat
	POP	BC
	POP	BC
;  475						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  476						break;
	JR	L_84
;  477					case kb_Clear:
L_79:
;  478						keyRecentlyPressed = true;
	LD	(IX+-13),1
;  479						strcpy(equ,"");
	LD	BC,L__118
	PUSH	BC
	PEA	IX+-93
	CALL	_strcpy
	POP	BC
	POP	BC
;  480						break;
;  481					default:
;  482						break;
;  483				}
;  484	    	} while(mode == 1 && kb_Data[kb_group_1] != kb_2nd);
L_84:
	LD	A,(IX+-36)
	CP	A,1
	JR	NZ,L_131
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_83
;  485	    }
L_131:
;  486	    if (mode == 2)
	LD	A,(IX+-36)
	CP	A,2
	JR	NZ,L_132
;  487	    {
;  488			do
L_128:
;  489			{
;  490				//THIS IS WHERE THE FUN BEGINS
;  491				if (!firstLoopIsComplete)
	LD	A,(IX+-50)
	OR	A,A
	JR	NZ,L_88
;  492				{
;  493					i = 0;
;  494					//the stuff here will only happen the first time this loop is run
;  495					gfx_FillScreen(gfx_white); //fill the screen with white
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  496					gfx_PrintStringXY(graph, 320 - gfx_GetStringWidth(graph), 230);
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  497					gfx_BlitRectangle(gfx_buffer, 320 - gfx_GetStringWidth(graph), 230, gfx_GetStringWidth(graph), 10);
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_gfx_BlitRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  498					firstLoopIsComplete = true; //make sure these aren't run again
	LD	(IX+-50),1
;  499				}
L_88:
;  500				kb_Scan(); //scan the keyboard for inputs
	CALL	_kb_Scan
;  501				key7 = kb_Data[kb_group_7]; //load the group 7 registers
	LD	A,(16056350)
	LD	(IX+-51),A
;  502				gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  503				switch (key7)
	LD	A,(IX+-51)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__124:
	LD	DE,8
	OR	A,A
	SBC	HL,DE
	JR	Z,L_89
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L_94
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	C,L_94
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_94
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,L__123-3
	ADD	HL,BC
	LD	HL,(HL)
	JP	(HL)
L__123:
	DW24	L_90	

	DW24	L_91	

	DW24	L_94	

	DW24	L_92	

;  504				{
;  505					//this is for controlling perspective, but the ez80 is a crappy 48mHz cpu and can't do this in real time
;  506					//(well it can, but it has to redraw the function every freakin' time)
;  507					case kb_Up:
L_89:
;  508						//	gfx_FillScreen( gfx_white); //every time this happens, we want to clear the screen before drawing stuff again
;  509						gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  510						gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  511						b1 += .15;
	LD	BC,(IX+-29)
	LD	A,(IX+-26)
	LD	HL,1677722
	LD	E,62
	CALL	__fadd
	LD	(IX+-29),BC
	LD	(IX+-26),A
;  512						lol3 = false; //this is so that it redraws the function
	LD	(IX+-32),0
;  513						break;
	JR	L_94
;  514					case kb_Down:
L_90:
;  515						gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  516						gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  517						b1 -= .15;
	LD	BC,(IX+-29)
	LD	A,(IX+-26)
	LD	HL,1677722
	LD	E,62
	CALL	__fsub
	LD	(IX+-29),BC
	LD	(IX+-26),A
;  518						lol3 = false; //i honestly should name my variables more intuitively so you can actually understand what they do
	LD	(IX+-32),0
;  519						break;
	JR	L_94
;  520					case kb_Left:
L_91:
;  521						gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  522						gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  523						a1 += .15;
	LD	BC,(IX+-25)
	LD	A,(IX+-22)
	LD	HL,1677722
	LD	E,62
	CALL	__fadd
	LD	(IX+-25),BC
	LD	(IX+-22),A
;  524						lol3 = false;
	LD	(IX+-32),0
;  525						break;
	JR	L_94
;  526					case kb_Right:
L_92:
;  527						gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  528						gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  529						a1 -= .15;
	LD	BC,(IX+-25)
	LD	A,(IX+-22)
	LD	HL,1677722
	LD	E,62
	CALL	__fsub
	LD	(IX+-25),BC
	LD	(IX+-22),A
;  530						lol3 = false;
	LD	(IX+-32),0
;  531						break;
;  532					default:
;  533						break;
;  534				}
L_94:
;  535				//The perspective box
;  536				//This is my solution to controlling perspective, since we can't rotate in real time
;  537				//rotate the preview axes to desired position and press enter, and the function will redraw itself
;  538				gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  539				gfx_VertLine_NoClip(320 - 64, 0, 64); //borders for box
	LD	BC,64
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_VertLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  540				gfx_HorizLine_NoClip(320 - 64, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,256
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;  541				//x-axis
;  542				gfx_Line_NoClip(288 - (x_x(a1, b1, c1) * 24), 32 + (x_y(a1, b1, c1) * 24), (int) (288 + (x_x(a1, b1, c1) * 24)),
;  543								(int) (32 - (x_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_x_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_x_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_x_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_x_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  544				gfx_PrintStringXY("x", (int) (288 + (x_x(a1, b1, c1) * 25)), (int) (32 - (x_y(a1, b1, c1) * 25))); //axis labels
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_x_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_x_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__129
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  545				//y-axis
;  546				gfx_Line_NoClip(288 - (y_x(a1, b1, c1) * 24), 32 + (y_y(a1, b1, c1) * 24), (int) (288 + (y_x(a1, b1, c1) * 24)),
;  547								(int) (32 - (y_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_y_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_y_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_y_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_y_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  548				gfx_PrintStringXY("y", (int) (288 + (y_x(a1, b1, c1) * 25)), (int) (32 - (y_y(a1, b1, c1) * 25)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_y_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_y_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__130
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  549				//z-axis
;  550				gfx_Line_NoClip(288 - (z_x(a1, b1, c1) * 24), 32 + (z_y(a1, b1, c1) * 24), (int) (288 + (z_x(a1, b1, c1) * 24)),
;  551								(int) (32 - (z_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_z_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_z_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_z_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_z_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  552				gfx_PrintStringXY("z", (int) (288 + (z_x(a1, b1, c1) * 25)), (int) (32 - (z_y(a1, b1, c1) * 25)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_z_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_z_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__131
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  553				if (!lol3)
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_97
;  554				{
;  555					gfx_BlitRectangle(gfx_buffer, 320 - 64, 0, 64,
;  556									  65); //blit the corner; take from the buffer and draw it on screen
	LD	BC,65
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_BlitRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  557					lol3 = true; //we don't want this to keep running
	LD	(IX+-32),1
;  558				}
L_97:
;  559				if (kb_Data[kb_group_6] == kb_Enter)
	LD	A,(16056348)
	CP	A,1
	JR	NZ,L_126
;  560				{
;  561					gfx_PrintStringXY(graph, 320 - gfx_GetStringWidth(graph), 230);
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  562					gfx_BlitRectangle(gfx_buffer, 320 - gfx_GetStringWidth(graph), 230, gfx_GetStringWidth(graph), 10);
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_gfx_BlitRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  563					a = a1;
	LD	BC,(IX+-25)
	LD	A,(IX+-22)
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  564					b = b1;
	LD	BC,(IX+-29)
	LD	A,(IX+-26)
	LD	(IX+-8),BC
	LD	(IX+-5),A
;  565					c = c1;
	LD	BC,0
	LD	(IX+-12),BC
	XOR	A,A
	LD	(IX+-9),A
;  566					graphingIsComplete = false;
	LD	(IX+-53),0
;  567				}
L_126:
;  568	
;  569	
;  570				if (!graphingIsComplete)
	LD	A,(IX+-53)
	OR	A,A
	JR	NZ,L_129
;  571				{
;  572					//basically, this is the for-loop that controls graphing
;  573					//initial condition: t=0
;  574					//go until t is greater than one
;  575					//add dx to t each time
;  576					gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  577					gfx_SetColor(gfx_black); //we want to draw in black
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  578					//x-axis
;  579					//apparently the _NoClip functions are faster than their clipped counterparts
;  580					gfx_Line_NoClip(160 - (x_x(a, b, c) * 100), 120 + (x_y(a, b, c) * 100), (int) (160 + (x_x(a, b, c) * 100)),
;  581									(int) (120 - (x_y(a, b, c) *
;  582												  100))); //we're casting doubles to ints here, but i think that is redundant since gfx_Line converts doubles automatically
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_x_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_x_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_x_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_x_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  583					gfx_PrintStringXY("x", (int) (160 + (x_x(a, b, c) * 100)),
;  584									  (int) (120 - (x_y(a, b, c) * 100))); //axis labels, according to the right-hand rule
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_x_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_x_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__135
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  585					//y-axis
;  586					gfx_Line_NoClip(160 - (y_x(a, b, c) * 100), 120 + (y_y(a, b, c) * 100), (int) (160 + (y_x(a, b, c) * 100)),
;  587									(int) (120 - (y_y(a, b, c) *
;  588												  100))); //btw (160,120) is the center of the screen, counting from the top left corner as (0,0)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_y_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_y_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_y_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_y_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  589					gfx_PrintStringXY("y", (int) (160 + (y_x(a, b, c) * 100)), (int) (120 - (y_y(a, b, c) * 100)));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_y_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_y_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__136
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  590					//z-axis
;  591					gfx_Line_NoClip(160 - (z_x(a, b, c) * 100), 120 + (z_y(a, b, c) * 100), (int) (160 + (z_x(a, b, c) * 100)),
;  592									(int) (120 - (z_y(a, b, c) * 100))); //the resolution of the TI84+CE is 320*240
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_z_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_z_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_z_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_z_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	CALL	_gfx_Line_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  593					gfx_PrintStringXY("z", (int) (160 + (z_x(a, b, c) * 100)), (int) (120 - (z_y(a, b, c) * 100)));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_z_y
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_z_x
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__137
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  594					i = 0;
	LD	(IX+-30),0
;  595					for (t = 0; t < 1 && kb_Data[kb_group_1] != kb_2nd; t += .00909)
	LD	BC,0
	LD	(IX+-110),BC
	XOR	A,A
	LD	(IX+-107),A
	JR	L_123
L_121:
;  596					{
;  597						kb_Scan(); //keep scanning for key presses
	CALL	_kb_Scan
;  598						gfx_SetColor(gfx_green); //we want to graph in green
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  599						//equations for the grid/graph
;  600						g = 2 * s2 * ((floor(t * (n + 1)) / n) - .5);
	LD	BC,(IX+-110)
	LD	A,(IX+-107)
	LD	HL,3145728
	LD	E,65
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,2097152
	LD	E,65
	CALL	__fdiv
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-17),BC
	LD	(IX+-14),A
;  601						h = 2 * s2 * (mod(t * (n + 1), 1) - .5);
	LD	C,63
	LD	B,0
	PUSH	BC
	LD	HL,3145728
	LD	E,65
	LD	BC,8388608
	PUSH	BC
	LD	BC,(IX+-110)
	LD	A,(IX+-107)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_mod
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-21),BC
	LD	(IX+-18),A
;  602						//	_g = 2*s2*((floor((t+dx)*(n+1))/n)-.5); //unused for now
;  603						//	_h = 2*s2*(mod((t+dx)*(n+1),1)-.5); //unused for now
;  604	
;  605	
;  606	
;  607						xxNodes[i] = (160 + (s * ((x_x(a, b, c) * g) + (y_x(a, b, c) * h) +
;  608															  (z_x(a, b, c) * parseRPN(equ,g, h) * .25)))); //fill out the arrays of nodes
	LD	A,(IX+-30)
	UEXT	HL
	LD	BC,IX
	LD	IY,-134
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	LD	(IX+-43),HL
	LD	(IX+-128),HL
	LD	(IX+-103),HL
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-290	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-291	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	POP	IY
	PUSH	BC
	LD	BC,-290	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	PUSH	BC
	LD	IY,-291	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-286	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	PEA	IX+-93
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-287	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	LD	BC,-283	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	POP	IY
	PUSH	BC
	LD	BC,-283	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	POP	IY
	PUSH	BC
	LD	BC,-286	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	PUSH	BC
	LD	IY,-287	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	LD	HL,(IX+-43)
	LD	(HL),C
;  609						xyNodes[i] = (
;  610								120 - (s * ((x_y(a, b, c) * g) + (y_y(a, b, c) * h) + (z_y(a, b, c) * parseRPN(equ,g, h)))));
	LD	A,(IX+-30)
	UEXT	HL
	LD	BC,IX
	LD	IY,-137
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	LD	(IX+-39),HL
	LD	(IX+-125),HL
	LD	(IX+-106),HL
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-279	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-280	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	POP	IY
	PUSH	BC
	LD	BC,-279	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	PUSH	BC
	LD	IY,-280	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-275	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	PEA	IX+-93
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-276	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	LD	BC,-272	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	POP	IY
	PUSH	BC
	LD	BC,-272	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	POP	IY
	PUSH	BC
	LD	BC,-275	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	PUSH	BC
	LD	IY,-276	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	HL,(IX+-39)
	LD	(HL),C
;  611						yxNodes[i] = (
;  612								160 + (s * ((x_x(a, b, c) * h) + (y_x(a, b, c) * g) + (z_x(a, b, c) * parseRPN(equ,h, g)))));
	LD	A,(IX+-30)
	UEXT	HL
	LD	BC,IX
	LD	IY,-140
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	LD	(IX+-49),HL
	LD	(IX+-119),HL
	LD	(IX+-97),HL
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-268	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-269	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	POP	IY
	PUSH	BC
	LD	BC,-268	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	PUSH	BC
	LD	IY,-269	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-264	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	PEA	IX+-93
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-265	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	LD	BC,-261	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	POP	IY
	PUSH	BC
	LD	BC,-261	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	POP	IY
	PUSH	BC
	LD	BC,-264	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	PUSH	BC
	LD	IY,-265	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	LD	HL,(IX+-49)
	LD	(HL),C
;  613						yyNodes[i] = (
;  614								120 - (s * ((x_y(a, b, c) * h) + (y_y(a, b, c) * g) + (z_y(a, b, c) * parseRPN(equ,h, g)))));
	LD	A,(IX+-30)
	UEXT	HL
	LD	BC,IX
	LD	IY,-143
	ADD	IY,BC
	LD	BC,(IY)
	LD	L,A
	ADD	HL,BC
	LD	(IX+-46),HL
	LEA	IY,IX+-128
	LD	(IY+-3),HL
	LD	(IX+-100),HL
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-257	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	H,A
	PUSH	IY
	PUSH	BC
	LD	IY,-258	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),H
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	POP	IY
	PUSH	BC
	LD	BC,-257	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	PUSH	BC
	LD	IY,-258	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	H,(IY)
	POP	BC
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-125),BC
	POP	IY
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-126),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-122),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-122)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-125)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-126)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	HL,(IX+-46)
	LD	(HL),C
;  615	
;  616						if (160 + (s * ((x_x(a, b, c) * g) + (y_x(a, b, c) * h) +
;  617								  (z_x(a, b, c) * parseRPN(equ,g, h) * .25))) > 320)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-118),BC
	POP	IY
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-119),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-118)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-119)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-114),BC
	POP	IY
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-115),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-111),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-111)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-114)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-115)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	LD	HL,10485760
	LD	E,67
	CALL	__fcmp
	JP	P,L_101
;  618						{
;  619							xxNodes[i] = 320;
	LD	BC,(IX+-43)
	LD	(IX+-128),BC
	LD	BC,(IX+-43)
	LD	(IX+-103),BC
	LD	HL,(IX+-43)
	LD	(HL),64
;  620						}
L_101:
;  621						if (120 - (s * ((x_y(a, b, c) * g) + (y_y(a, b, c) * h) + (z_y(a, b, c) * parseRPN(equ,g, h)))) > 240)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-107),BC
	POP	IY
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-108),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-107)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-108)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-103),BC
	POP	IY
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-104),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-100),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-100)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-103)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-104)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	LD	HL,7340032
	LD	E,67
	CALL	__fcmp
	JP	P,L_103
;  622						{
;  623							xyNodes[i] = 239;
	LD	BC,(IX+-39)
	LD	(IX+-125),BC
	LD	BC,(IX+-39)
	LD	(IX+-106),BC
	LD	HL,(IX+-39)
	LD	(HL),239
;  624						}
L_103:
;  625						if (160 + (s * ((x_x(a, b, c) * h) + (y_x(a, b, c) * g) + (z_x(a, b, c) * parseRPN(equ,h, g)))) > 320)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-96),BC
	POP	IY
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-97),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-96)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-97)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-92),BC
	POP	IY
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-93),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-89),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-89)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-92)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-93)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	LD	HL,10485760
	LD	E,67
	CALL	__fcmp
	JP	P,L_105
;  626						{
;  627							yxNodes[i] = 320;
	LD	BC,(IX+-49)
	LD	(IX+-119),BC
	LD	BC,(IX+-49)
	LD	(IX+-97),BC
	LD	HL,(IX+-49)
	LD	(HL),64
;  628						}
L_105:
;  629						if (120 - (s * ((x_y(a, b, c) * h) + (y_y(a, b, c) * g) + (z_y(a, b, c) * parseRPN(equ,h, g)))) > 240)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-85),BC
	POP	IY
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-86),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-85)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-86)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-81),BC
	POP	IY
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-82),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-78),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-78)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-81)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-82)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	LD	HL,7340032
	LD	E,67
	CALL	__fcmp
	JP	P,L_107
;  630						{
;  631							yyNodes[i] = 239;
	LD	BC,(IX+-46)
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	LD	BC,(IX+-46)
	LD	(IX+-100),BC
	LD	HL,(IX+-46)
	LD	(HL),239
;  632						}
L_107:
;  633	
;  634	
;  635	
;  636						if (160 + (s * ((x_x(a, b, c) * g) + (y_x(a, b, c) * h) +
;  637								  (z_x(a, b, c) * parseRPN(equ,g, h) * .25))) < 0)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-74),BC
	POP	IY
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-75),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-74)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-75)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-70),BC
	POP	IY
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-71),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-67),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-67)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-70)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-71)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	LD	E,A
	LD	HL,BC
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_109
;  638						{
;  639							xxNodes[i] = 0;
	LD	BC,(IX+-128)
	LD	(IX+-103),BC
	LD	HL,BC
	LD	(HL),0
;  640						}
L_109:
;  641						if (120 - (s * ((x_y(a, b, c) * g) + (y_y(a, b, c) * h) + (z_y(a, b, c) * parseRPN(equ,g, h)))) < 0)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-63),BC
	POP	IY
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-64),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-63)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-64)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-59),BC
	POP	IY
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-60),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-56),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-56)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-59)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-60)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	LD	E,A
	LD	HL,BC
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_111
;  642						{
;  643							xyNodes[i] = 0;
	LD	BC,(IX+-125)
	LD	(IX+-106),BC
	LD	HL,BC
	LD	(HL),0
;  644						}
L_111:
;  645						if (160 + (s * ((x_x(a, b, c) * h) + (y_x(a, b, c) * g) + (z_x(a, b, c) * parseRPN(equ,h, g)))) < 0)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-52),BC
	POP	IY
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-53),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-52)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-53)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-48),BC
	POP	IY
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-49),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-45),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_x
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-45)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-48)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-49)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	LD	E,A
	LD	HL,BC
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_113
;  646						{
;  647							yxNodes[i] = 0;
	LD	BC,(IX+-119)
	LD	(IX+-97),BC
	LD	HL,BC
	LD	(HL),0
;  648						}
L_113:
;  649						if (120 - (s * ((x_y(a, b, c) * h) + (y_y(a, b, c) * g) + (z_y(a, b, c) * parseRPN(equ,h, g)))) < 0)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-41),BC
	POP	IY
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-42),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-41)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-42)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-36),BC
	POP	IY
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	PEA	IX+-93
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-38),A
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-33),HL
	POP	IY
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-294
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_z_y
	PUSH	BC
	LD	BC,-294
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-295
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),HL
	LD	HL,(IY+-33)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	POP	IY
	CALL	__fmul
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),BC
	LD	HL,(IY+-36)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-30)
	LD	(IY+-37),H
	LD	H,(IY+-38)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-37)
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	LD	E,A
	LD	HL,BC
	LD	BC,0
	XOR	A,A
	CALL	__fcmp
	JP	P,L_118
;  650						{
;  651							yyNodes[i] = 0;
	LEA	IY,IX+-128
	LD	BC,(IY+-3)
	LD	(IX+-100),BC
	LD	HL,BC
	LD	(HL),0
;  652						}
L_118:
;  653	
;  654	
;  655						//testing purposes
;  656		//                xxNodes[i][0] = (uint8_t)(160 + (s * ((x_x(a, b, c) * g) + (y_x(a, b, c) * h) +
;  657		//                                                      (z_x(a, b, c) * function(g, h))))); //fill out the arrays of nodes
;  658		//                xyNodes[i][0] = (uint8_t)(
;  659		//                        120 - (s * ((x_y(a, b, c) * g) + (y_y(a, b, c) * h) + (z_y(a, b, c) * function( g, h)))));
;  660		//                yxNodes[i][0] = (uint8_t)(
;  661		//                        160 + (s * ((x_x(a, b, c) * h) + (y_x(a, b, c) * g) + (z_x(a, b, c) *function( h, g)))));
;  662		//                yyNodes[i][0] = (uint8_t)(
;  663		//                        120 - (s * ((x_y(a, b, c) * h) + (y_y(a, b, c) * g) + (z_y(a, b, c) * function( h, g)))));
;  664	
;  665	
;  666						if (i >= 12) //for some reason the first 12 nodes don't connect to the rest, so we omit them
	LD	A,(IX+-30)
	CP	A,12
	JR	C,L_120
;  667						{
;  668							if ((i - 1) % (int) (n) != 0) // we don't want to connect the nodes that are on opposite sides
	LD	A,(IX+-30)
	UEXT	HL
	LD	L,A
	DEC	HL
	OR	A,A
	LD	BC,10
	CALL	__irems
	LD	BC,0
	SBC	HL,BC
	JR	NZ,L__148
	LD	A,1
	JR	L__149
L__148:
	XOR	A,A
L__149:
	LD	(IX+-111),A
	OR	A,A
	JR	NZ,L_115
;  669							{
;  670								gfx_Line(xxNodes[i - 1], xyNodes[i - 1], xxNodes[i],
;  671										 xyNodes[i]); //connect the nodes
	LD	A,(IX+-30)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	IY,(IX+-106)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	HL,(IX+-103)
	LD	A,(HL)
	UEXT	HL
	LD	IY,-137
	LD	L,A
	PUSH	HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-24),BC
	LD	(IY+-27),IX	; unspill
	LD	DE,(IY+-24)
	LD	(IY+-24),DE
	LD	DE,(IY+-27)
	POP	IY
	ADD	IY,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-24)
	POP	IY
	LD	HL,(IY)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	IY,-134
	LD	L,A
	PUSH	HL
	LD	DE,IX
	ADD	IY,DE
	LD	HL,(IY)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  672							}
L_115:
;  673							gfx_SetColor(gfx_blue); //we want graph in blue
	LD	BC,16
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  674							if ((i - 1) % (int) (n) != 0)
	LD	A,(IX+-111)
	OR	A,A
	JR	NZ,L_120
;  675							{ //do the same thing
;  676								gfx_Line(yxNodes[i - 1], yyNodes[i - 1], yxNodes[i], yyNodes[i]);
	LD	A,(IX+-30)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	IY,(IX+-100)
	LD	A,(IY)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	HL,(IX+-97)
	LD	A,(HL)
	UEXT	HL
	LD	IY,-143
	LD	L,A
	PUSH	HL
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-18),BC
	LD	(IY+-21),IX	; unspill
	LD	DE,(IY+-18)
	LD	(IY+-18),DE
	LD	DE,(IY+-21)
	POP	IY
	ADD	IY,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-18)
	POP	IY
	LD	HL,(IY)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	IY,-140
	LD	L,A
	PUSH	HL
	LD	DE,IX
	ADD	IY,DE
	LD	HL,(IY)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_Line
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  677							}
;  678						}
L_120:
;  679						i++; //increment i
	INC	(IX+-30)
	LD	BC,(IX+-110)
	LD	A,(IX+-107)
	LD	HL,1371705
	LD	E,60
	CALL	__fadd
	LD	(IX+-110),BC
	LD	(IX+-107),A
;  680						//really inefficient pixel plotter. slow af
;  681						//use this at your own risk
;  682						//	gfx_SetPixel( 160 + (s*((x_x(a,b,c)*g)+(y_x(a,b,c)*h)+(z_x(a,b,c)*function(g,h)))) ,   120-(s*((x_y(a,b,c)*g) + (y_y(a,b,c)*h) + (z_y(a,b,c)*function(g,h)))));
;  683						//	gfx_SetColor(gfx_blue);
;  684						//	gfx_SetPixel(160+(s*((x_x(a,b,c)*h)+(y_x(a,b,c)*g)+(z_x(a,b,c)*function(h,g)))),120-(s*((x_y(a,b,c)*h) + (y_y(a,b,c)*g) + (z_y(a,b,c)*function(h,g)))));
;  685	
;  686					}
L_123:
	LD	HL,(IX+-110)
	LD	E,(IX+-107)
	LD	BC,8388608
	LD	A,63
	CALL	__fcmp
	JP	P,L_124
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_121
L_124:
;  687					gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  688					graphingIsComplete = true; // this is so that it only plots the function once
	LD	(IX+-53),1
;  689					lol3 = false;
	LD	(IX+-32),0
;  690				}
;  691	
;  692			} while (!kill && kb_Data[kb_group_1] != kb_2nd);
L_129:
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_128
;  693	    }
L_132:
;  694	
;  695	    gfx_End(); //stop the gfx
	CALL	_gfx_End
;  696	    prgm_CleanUp(); //clear the screen
;  697	    //end of program
;  698	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_parseRPN                           IMPORT  -----   function
;_mod                                IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_z_x                                IMPORT  -----   function
;_z_y                                IMPORT  -----   function
;_y_x                                IMPORT  -----   function
;_y_y                                IMPORT  -----   function
;_x_x                                IMPORT  -----   function
;_x_y                                IMPORT  -----   function
;_gfx_Line_NoClip                    IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_VertLine_NoClip                IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_BlitRectangle                  IMPORT  -----   function
;_strcpy                             IMPORT  -----   function
;_strcat                             IMPORT  -----   function
;_backspace                          IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_0temp0                             STATIC     40   variable
;yyNodes                             IX-143      3   variable
;yxNodes                             IX-140      3   variable
;xyNodes                             IX-137      3   variable
;xxNodes                             IX-134      3   variable
;G_7                                 IX-131      3   variable
;G_4                                 IX-128      3   variable
;G_5                                 IX-125      3   variable
;menuTitle                           IX-122      3   variable
;G_6                                 IX-119      3   variable
;key5                                IX-116      1   variable
;key4                                IX-115      1   variable
;key3                                IX-114      1   variable
;key2                                IX-113      1   variable
;key1                                IX-112      1   variable
;G_10                                IX-111      1   variable
;t                                   IX-110      4   variable
;G_8                                 IX-106      3   variable
;G_9                                 IX-103      3   variable
;G_11                                IX-100      3   variable
;G_12                                 IX-97      3   variable
;lol2                                 IX-94      1   variable
;equ                                  IX-93     40   variable
;graphingIsComplete                   IX-53      1   variable
;key6                                 IX-52      1   variable
;key7                                 IX-51      1   variable
;firstLoopIsComplete                  IX-50      1   variable
;G_2                                  IX-49      3   variable
;G_3                                  IX-46      3   variable
;G_0                                  IX-43      3   variable
;main                                 IX-40      1   variable
;G_1                                  IX-39      3   variable
;mode                                 IX-36      1   variable
;graph                                IX-35      3   variable
;lol3                                 IX-32      1   variable
;sel                                  IX-31      1   variable
;i                                    IX-30      1   variable
;b1                                   IX-29      4   variable
;a1                                   IX-25      4   variable
;h                                    IX-21      4   variable
;g                                    IX-17      4   variable
;keyRecentlyPressed                   IX-13      1   variable
;c                                    IX-12      4   variable
;b                                     IX-8      4   variable
;a                                     IX-4      4   variable


; Stack Frame Size: 301 (bytes)
;       Spill Code: -75 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"Graphing..."
	DB	0
L__2:
	DB	"Main Menu"
	DB	0
L__3:
	DB	"R3 - 3D grapher for the TI84PCE"
	DB	0
L__4:
	DB	"f(x,y) = "
	DB	0
L__6:
	DB	"1. Enter equation "
	DB	0
L__7:
	DB	"2. Graph"
	DB	0
L__8:
	DB	"*"
	DB	0
L__23:
	DB	"f(x,y) = "
	DB	0
L__24:
	DB	"|"
	DB	0
L__47:
	DB	"ln"
	DB	0
L__48:
	DB	"log"
	DB	0
L__61:
	DB	"0"
	DB	0
L__62:
	DB	"1"
	DB	0
L__63:
	DB	"4"
	DB	0
L__64:
	DB	"7"
	DB	0
L__65:
	DB	" "
	DB	0
L__66:
	DB	"sin"
	DB	0
L__67:
	DB	"x"
	DB	0
L__80:
	DB	"."
	DB	0
L__81:
	DB	"2"
	DB	0
L__82:
	DB	"5"
	DB	0
L__83:
	DB	"8"
	DB	0
L__84:
	DB	"cos"
	DB	0
L__85:
	DB	"y"
	DB	0
L__97:
	DB	"`"
	DB	0
L__98:
	DB	"3"
	DB	0
L__99:
	DB	"6"
	DB	0
L__100:
	DB	"9"
	DB	0
L__101:
	DB	"tan"
	DB	0
L__113:
	DB	"-"
	DB	0
L__114:
	DB	"+"
	DB	0
L__115:
	DB	"*"
	DB	0
L__116:
	DB	"/"
	DB	0
L__117:
	DB	"^"
	DB	0
L__118:
	DB	0
L__129:
	DB	"x"
	DB	0
L__130:
	DB	"y"
	DB	0
L__131:
	DB	"z"
	DB	0
L__135:
	DB	"x"
	DB	0
L__136:
	DB	"y"
	DB	0
L__137:
	DB	"z"
	DB	0
	SEGMENT TEXT
_0temp0:
	DB	120
	DB	32
	DB	115
	DB	105
	DB	110
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	SEGMENT CODE
;  699	
;  700	//function that prints simple text on screen
;  701	//similar to the Output() function of TI-BASIC
;  702	void printText(const char *text, uint8_t xpos, uint8_t ypos)
;  703	{
_printText:
	CALL	__frameset0
;  704	    os_SetCursorPos(ypos, xpos); //set the place to start putting text
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;  705	    os_PutStrFull(text); //output the string
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  706	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -75 (instruction)


;  707	
;  708	/* Simple way to fill the screen with a given color */
;  709	void fillScreen(uint8_t color)
;  710	{
_fillScreen:
	CALL	__frameset0
;  711	    memset_fast(lcd_Ram, color, LCD_SIZE);
	LD	BC,153600
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,13893632
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  712	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fillScreen ***************************
;Name                         Addr/Register   Size   Type
;_memset                             IMPORT  -----   function
;color                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -75 (instruction)


;  713	
;  714	//used to calculate the position of points in the 3d world and translate them into 2d coordinates to draw onto the screen
;  715	//when using these, ALWAYS type (a,b,c) as the arguments of the function.
;  716	double x_x(double a, double b, double c)
;  717	{
_x_x:
	LD	HL,-11
	CALL	__frameset
;  718	    return (cos(c) * cos(a)) - (sin(c) * sin(a) * sin(b));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-4),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-1),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-7)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-1)
	LD	HL,BC
	LD	BC,(IX+-4)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  719	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _x_x ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -75 (instruction)


;  720	
;  721	double x_y(double a, double b, double c)
;  722	{
_x_y:
	LD	HL,-11
	CALL	__frameset
;  723	    return (cos(c) * sin(a) * sin(b)) + (sin(c) * cos(a));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fadd
	LD	E,A
	LD	HL,BC
;  724	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _x_y ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -75 (instruction)


;  725	
;  726	double y_x(double a, double b, double c)
;  727	{
_y_x:
	LD	HL,-14
	CALL	__frameset
;  728	    return (-1 * cos(c) * sin(a)) - (sin(c) * cos(a) * sin(b));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	B,A
	LD	(IX+-13),BC
	CALL	_sin
	LD	BC,(IX+-13)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-13),BC
	LD	(IX+-14),A
	CALL	_cos
	LD	BC,(IX+-13)
	LD	A,(IX+-14)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-10),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-13),BC
	CALL	_sin
	LD	BC,(IX+-13)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-10)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  729	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _y_x ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: -75 (instruction)


;  730	
;  731	double y_y(double a, double b, double c)
;  732	{
_y_y:
	LD	HL,-11
	CALL	__frameset
;  733	    return (cos(c) * cos(a) * sin(b)) - (sin(c) * sin(a));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  734	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _y_y ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -75 (instruction)


;  735	
;  736	double z_x(double a, double b, double c)
;  737	{
_z_x:
	LD	HL,-6
	CALL	__frameset
;  738	    return -1 * sin(c) * cos(b);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_sin
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-6),BC
	CALL	_cos
	LD	BC,(IX+-6)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
;  739	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _z_x ***************************
;Name                         Addr/Register   Size   Type
;_cos                                IMPORT  -----   function
;_sin                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: -75 (instruction)


;  740	
;  741	double z_y(double a, double b, double c)
;  742	{
_z_y:
	LD	HL,-4
	CALL	__frameset
;  743	    return cos(c) * cos(b);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-3),BC
	LD	(IX+-4),A
	CALL	_cos
	LD	BC,(IX+-3)
	LD	A,(IX+-4)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	HL,BC
;  744	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _z_y ***************************
;Name                         Addr/Register   Size   Type
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: -75 (instruction)


;  745	
;  746	//the 3d function you want to graph
;  747	//note that this is in the format f(x,y)=
;  748	//for example: for f(x,y)=cos(xy)-y^2, type in
;  749	//	return cos(x*y)-(pow(y,2));
;  750	//soon i should have user input
;  751	double function(double x, double y)
;  752	{
_function:
	CALL	__frameset0
;  753	    return x-y;
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  754	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _function ***************************
;Name                         Addr/Register   Size   Type
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -75 (instruction)


;  755	
;  756	//proper modulus function
;  757	//the % operator only works with integers
;  758	//and the fmod() function can't handle negative numbers properly
;  759	double mod(double a, double N)
;  760	{
_mod:
	CALL	__frameset0
;  761	    return a - N * floor(a / N);
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  762	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mod ***************************
;Name                         Addr/Register   Size   Type
;_floor                              IMPORT  -----   function
;N                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: -75 (instruction)


;  763	
;  764	char *tokenize(char *input)
;  765	{
_tokenize:
	LD	HL,-3
	CALL	__frameset
;  766	    int i = 0;
;  767	    char *output;
;  768	    output = strtok(input, ",");
	LD	BC,L__168
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;  769	    return output;
;  770	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _tokenize ***************************
;Name                         Addr/Register   Size   Type
;_strtok                             IMPORT  -----   function
;output                                IX-3      3   variable
;input                                 IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -75 (instruction)


	SEGMENT STRSECT
L__168:
	DB	","
	DB	0
	SEGMENT CODE
;  771	
;  772	char *floatToStr(float arg)
;  773	{
_floatToStr:
	LD	HL,-18
	CALL	__frameset
;  774	    const real_t arg2 = os_FloatToReal(arg);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-18
	CALL	_os_FloatToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-9
;  775	    os_RealToStr(text, &arg2, -1, 1, -1);
	LD	BC,16777215
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	PEA	IX+-9
	LD	BC,_text
	PUSH	BC
	LD	BC,9
	LDIR	
	CALL	_os_RealToStr
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  776	    return text;
	LD	HL,_text
;  777	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _floatToStr ***************************
;Name                         Addr/Register   Size   Type
;_text                               STATIC     15   variable
;_os_RealToStr                       IMPORT  -----   function
;_os_FloatToReal                     IMPORT  -----   function
;arg2                                  IX-9      9   variable
;arg                                   IX+6      4   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: -75 (instruction)


;  778	float strToFloat(char *arg, char *end)
;  779	{
_strToFloat:
	LD	HL,-18
	CALL	__frameset
;  780		const real_t arg2 = os_StrToReal(arg,&end);
	PEA	IX+9
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-18
	CALL	_os_StrToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-9
;  781		return os_RealToFloat(&arg2);
	PEA	IX+-9
	LD	BC,9
	LDIR	
	CALL	_os_RealToFloat
	POP	BC
;  782	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _strToFloat ***************************
;Name                         Addr/Register   Size   Type
;_os_RealToFloat                     IMPORT  -----   function
;_os_StrToReal                       IMPORT  -----   function
;arg2                                  IX-9      9   variable
;end                                   IX+9      3   parameter
;arg                                   IX+6      3   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: -75 (instruction)


;  783	//sets the size of the stack to 0
;  784	void initRPN()
;  785	{
_initRPN:
;  786	    size = 0;
	LD	BC,0
	LD	(_size),BC
;  787	}
	RET	


;**************************** _initRPN ***************************
;Name                         Addr/Register   Size   Type
;_size                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -75 (instruction)


;  788	//pushes the argument to the stack
;  789	void pushRPN(double v)
;  790	{
_pushRPN:
	CALL	__frameset0
;  791	    val[size++] = v;
	LD	HL,(_size)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_val
	ADD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	LD	BC,(_size)
	INC	BC
	LD	(_size),BC
;  792	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pushRPN ***************************
;Name                         Addr/Register   Size   Type
;_size                               STATIC      3   variable
;_val                                STATIC     96   variable
;v                                     IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -75 (instruction)


;  793	//returns the value of the element on top of the stack and removes it
;  794	double popRPN(void)
;  795	{
_popRPN:
;  796	    return val[--size];
	LD	BC,(_size)
	DEC	BC
	LD	(_size),BC
	LD	HL,(_size)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_val
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
;  797	}
	RET	


;**************************** _popRPN ***************************
;Name                         Addr/Register   Size   Type
;_val                                STATIC     96   variable
;_size                               STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -75 (instruction)


;  798	//THIS FINALLY WORKS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
;  799	double parseRPN(char *s, double X, double Y) //THE REVERSE POLISH NOTATION PARSER IS HERE
;  800	{
_parseRPN:
	LD	HL,-8
	CALL	__frameset
;  801	    double a, b; //declare my vars
;  802	    initRPN(); //set stack size to 0;
	CALL	_initRPN
;  803	    strcpy(c,s); //copy the string s to c, so we can mess with c all we want without damaging s
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,_c
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  804	    for(tokens = strtok(c,w); tokens != NULL; tokens = strtok(NULL,w)) //chop c into tokens, separated by spaces as delims
	LD	BC,(_w)
	PUSH	BC
	LD	BC,_c
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(_tokens),HL
	JR	L_185
L_183:
;  805	    {
;  806	    	//for each token we will:
;  807	    	a = strtod(tokens,&e); //convert it to a number and store it in a
	LD	BC,_e
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strtod
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	LD	(IX+-5),E
;  808	        if (e > tokens && *tokens != '+' && *tokens != '-' && *tokens != '/' && *tokens != '*' && *tokens != '^' && *tokens != 'x' && *tokens != 'y' ) //stupid
	LD	BC,(_e)
	LD	HL,(_tokens)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_182
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,43
	SBC	HL,BC
	JR	Z,L_182
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,45
	SBC	HL,BC
	JR	Z,L_182
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JR	Z,L_182
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,42
	SBC	HL,BC
	JR	Z,L_182
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,94
	SBC	HL,BC
	JR	Z,L_182
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	JR	Z,L_182
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,121
	SBC	HL,BC
	JR	Z,L_182
;  809	        {
;  810	        	pushRPN(a); //push a to the stack if the token was an actual number
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  811	        }
;  812	        else if (*tokens == 'x')
	JR	L_184
L_182:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,120
	SBC	HL,BC
	JR	NZ,L_180
;  813	        {
;  814	        	pushRPN(X); //push the value of argument X to stack
	LD	C,(IX+12)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  815	        }
;  816	        else if (*tokens == 'y')
	JR	L_184
L_180:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,121
	SBC	HL,BC
	JR	NZ,L_178
;  817	        {
;  818	        	pushRPN(Y); //push argument Y to stack
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  819	        }
;  820	#define binop(x)  b = popRPN(), a = popRPN(), pushRPN(x) //the binary operators: takes top 2 numbers on stack, evaluates them, then pushes the result back to stack
;  821	        else if (*tokens == '+')
	JR	L_184
L_178:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,43
	SBC	HL,BC
	JR	NZ,L_176
;  822	        {
;  823	        	binop(a + b);
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-8),BC
	LD	(IX+-5),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	A,(IX+-5)
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  824	        }
;  825	        else if (*tokens == '-')
	JR	L_184
L_176:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,45
	SBC	HL,BC
	JR	NZ,L_174
;  826	        {
;  827	        	binop(a - b);
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-8),BC
	LD	(IX+-5),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	A,(IX+-5)
	CALL	__fsub
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  828	        }
;  829	        else if (*tokens == '*')
	JR	L_184
L_174:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,42
	SBC	HL,BC
	JR	NZ,L_172
;  830	        {
;  831	        	binop(a * b);
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-8),BC
	LD	(IX+-5),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	A,(IX+-5)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  832	        }
;  833	        else if (*tokens == '/')
	JR	L_184
L_172:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JR	NZ,L_170
;  834	        {
;  835	        	binop(a / b);
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-8),BC
	LD	(IX+-5),E
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	A,(IX+-5)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  836	        }
;  837	        else if (*tokens == '^')
	JR	L_184
L_170:
	LD	HL,(_tokens)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,94
	SBC	HL,BC
	JR	NZ,L_168
;  838	        {
;  839	        	binop(pow(a, b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	CALL	_pow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  840	        }
;  841	#undef binop
;  842	#define monop(x) b = popRPN(), pushRPN(x); //mono operators: takes top number on stack, evaluates it, then pushes the result back to the stack
;  843	        else if (strcmp(tokens,"sin") == 0)
	JR	L_184
L_168:
	LD	BC,L__190
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_166
;  844	        {
;  845	        	monop(sin(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  846	        }
;  847	        else if (strcmp(tokens,"cos") == 0)
	JR	L_184
L_166:
	LD	BC,L__192
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_164
;  848	        {
;  849	        	monop(cos(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  850	        }
;  851	        else if (strcmp(tokens,"tan") == 0)
	JR	L_184
L_164:
	LD	BC,L__194
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_162
;  852	        {
;  853	        	monop(tan(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_tan
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  854	        }
;  855	        else if (strcmp(tokens,"ln") == 0)
	JR	L_184
L_162:
	LD	BC,L__196
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_160
;  856			{
;  857				monop(tan(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_tan
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  858			}
;  859	        else if (strcmp(tokens,"log") == 0)
	JR	L_184
L_160:
	LD	BC,L__198
	PUSH	BC
	LD	BC,(_tokens)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_184
;  860			{
;  861				monop(tan(b));
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_tan
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  862			}
;  863	#undef monop
;  864	    }
L_184:
	LD	BC,(_w)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(_tokens),HL
L_185:
	LD	BC,0
	LD	HL,(_tokens)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_183
;  865	    return popRPN();
	CALL	_popRPN
;  866	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _parseRPN ***************************
;Name                         Addr/Register   Size   Type
;_tan                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;_sin                                IMPORT  -----   function
;_strcmp                             IMPORT  -----   function
;_pow                                IMPORT  -----   function
;_popRPN                             IMPORT  -----   function
;_pushRPN                            IMPORT  -----   function
;_e                                  STATIC      3   variable
;_strtod                             IMPORT  -----   function
;_tokens                             STATIC      3   variable
;_w                                  STATIC      3   variable
;_strtok                             IMPORT  -----   function
;_c                                  STATIC     40   variable
;_strcpy                             IMPORT  -----   function
;_initRPN                            IMPORT  -----   function
;a                                     IX-8      4   variable
;b                                     IX-4      4   variable
;Y                                    IX+15      4   parameter
;X                                     IX+9      4   parameter
;s                                     IX+6      3   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: -75 (instruction)


	SEGMENT STRSECT
L__190:
	DB	"sin"
	DB	0
L__192:
	DB	"cos"
	DB	0
L__194:
	DB	"tan"
	DB	0
L__196:
	DB	"ln"
	DB	0
L__198:
	DB	"log"
	DB	0
	SEGMENT CODE
;  867	
;  868	void pushOP(char op)
;  869	{
_pushOP:
	CALL	__frameset0
;  870	    OP.op[OP.size++] = op;
	LD	HL,(_OP+96)
	LD	BC,_OP
	ADD	HL,BC
	LD	A,(IX+6)
	LD	(HL),A
	LD	BC,(_OP+96)
	INC	BC
	LD	(_OP+96),BC
;  871	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pushOP ***************************
;Name                         Addr/Register   Size   Type
;_OP                                 STATIC     99   variable
;op                                    IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: -75 (instruction)


;  872	double popOP(void)
;  873	{
_popOP:
;  874	    return OP.op[--OP.size];
	LD	BC,(_OP+96)
	DEC	BC
	LD	(_OP+96),BC
	LD	HL,(_OP+96)
	LD	BC,_OP
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	A,H
	LD	BC,HL
	CALL	__ltof
	LD	E,A
	LD	HL,BC
;  875	}
	RET	


;**************************** _popOP ***************************
;Name                         Addr/Register   Size   Type
;_OP                                 STATIC     99   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: -75 (instruction)


;  876	void shunt(void)
;  877	{
_shunt:
;  878	
;  879	}
	RET	


;**************************** _shunt ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: -75 (instruction)


;  880	char* backspace(char* str)
;  881	{
_backspace:
	LD	HL,-3
	CALL	__frameset
;  882	    int i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  883	    while(str[i] != '\0')
	JR	L_193
L_194:
;  884	    {
;  885	        i++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  886	
;  887	    }
L_193:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_194
;  888	    str[i-1] = '\0';
	LD	BC,(IX+-3)
	DEC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
;  889	    return str;
	LD	HL,(IX+6)
;  890	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _backspace ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;str                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: -75 (instruction)


	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_BlitRectangle:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine_NoClip:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_Line_NoClip:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _kb_Scan:ROM
	XREF _strcmp:ROM
	XREF _strtok:ROM
	XREF _strcat:ROM
	XREF _strcpy:ROM
	XREF _memset:ROM
	XREF _strtod:ROM
	XREF _malloc:ROM
	XREF _floor:ROM
	XREF _pow:ROM
	XREF _tan:ROM
	XREF _sin:ROM
	XREF _cos:ROM
	XREF _os_GetCSC:ROM
	XREF _os_StrToReal:ROM
	XREF _os_RealToStr:ROM
	XREF _os_FloatToReal:ROM
	XREF _os_RealToFloat:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF _delay:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XDEF _backspace
	XDEF _shunt
	XDEF _popOP
	XDEF _pushOP
	XDEF _parseRPN
	XDEF _popRPN
	XDEF _pushRPN
	XDEF _initRPN
	XDEF _strToFloat
	XDEF _floatToStr
	XDEF _tokenize
	XDEF _mod
	XDEF _function
	XDEF _z_y
	XDEF _z_x
	XDEF _y_y
	XDEF _y_x
	XDEF _x_y
	XDEF _x_x
	XDEF _fillScreen
	XDEF _printText
	XDEF _main
	XDEF _OP
	XDEF _size
	XDEF _val
	XDEF _tokens
	XDEF _w
	XDEF _e
	XDEF _d
	XDEF _c
	XDEF _bb
	XDEF _aa
	XDEF _r
	XDEF _text
	END
