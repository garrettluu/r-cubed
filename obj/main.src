; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_text:
	DS	15
_r:
	DS 4*1
_aa:
	DS 4*1
_bb:
	DS 4*1
_RPN:
	DS	99
;    1	/*	The AMAZING 3D grapher for the TI84+CE
;    2	 *by gluu
;    3	 *currently in a very early alpha stage
;    4	 *like, i don't even have user input
;    5	 *TODO: Mathematical expression parser
;    6	 *DONE! better way of handling perspective
;    7	 *TODO: possible cylindrical and spherical plots?
;    8	 *
;    9	 *Based on the 3D parametric grapher on desmos
;   10	 *
;   11	 *Please bear with parts of code that are redundant or inefficient.
;   12		I don't care enough to fix them for now.
;   13	 *
;   14	 * I think I fixed all indentation and formatting
;   15	 *	
;   16	 */
;   17	
;   18	
;   19	//headers
;   20	#include <stdbool.h>
;   21	#include <stddef.h>
;   22	#include <stdint.h>
;   23	#include <tice.h>
;   24	
;   25	//std headers
;   26	#include <math.h>
;   27	#include <stdio.h>
;   28	#include <stdlib.h>
;   29	#include <string.h>
;   30	
;   31	
;   32	/* CE Keypad C Library */
;   33	#include <keypadc.h>
;   34	#include <graphx.h>
;   35	#include <fileioc.h>
;   36	
;   37	
;   38	//C is a dumb language 
;   39	//why do i have to define my functions up here and then actually write them all the way down there after i write main()
;   40	//still better than writing assembly code tho
;   41	void printText(const char *text, uint8_t x, uint8_t y);
;   42	
;   43	void fillScreen(uint8_t color);
;   44	
;   45	double x_x(double a, double b, double c);
;   46	
;   47	double x_y(double a, double b, double c);
;   48	
;   49	double y_x(double a, double b, double c);
;   50	
;   51	double y_y(double a, double b, double c);
;   52	
;   53	double z_x(double a, double b, double c);
;   54	
;   55	double z_y(double a, double b, double c);
;   56	
;   57	double function(double x, double y);
;   58	
;   59	double mod(double a, double b);
;   60	
;   61	char *tokenize(char *input);
;   62	
;   63	char text[15];
;   64	
;   65	float r;
;   66	
;   67	float aa;
;   68	float bb;
;   69	
;   70	char *floatToStr(float arg);
;   71	typedef struct stack
;   72	{
;   73	    float val[24];
;   74	    int size;
;   75	}stack;
;   76	stack RPN;
	SEGMENT CODE
;   77	void initRPN(void);
;   78	void pushRPN(float val);
;   79	float peekRPN(void);
;   80	float popRPN(void);
;   81	float parseRPN(char *s);
;   82	//main function
;   83	//this is what gets run when the program starts
;   84	void main(void)
;   85	{
_main:
	LD	HL,-3245
	CALL	__frameset
;   86	    //initialize all the keymaps
;   87	    //I don't think all of them get used, but it's nice to have them anyways
;   88	    //feel free to delete the unused ones if you really want to save a few bytes
;   89	    kb_key_t key1;
;   90	    kb_key_t key2;
;   91	    kb_key_t key3;
;   92	    kb_key_t key4;
;   93	    kb_key_t key5;
;   94	    kb_key_t key6;
;   95	    kb_key_t key7;
;   96	
;   97	    //initialize strings
;   98	    const char *graph = "Graphing...";
	LD	BC,L__0
	LD	(IX+-27),BC
;   99	
;  100	    //declare variables and some constants
;  101	    //uint8_t is the best thing ever
;  102	    //it's basically an unsigned 8bit integer that takes up less space than an int
;  103	    //but functions the same as an int for all intents and purposes (except negatives)
;  104	    uint8_t sel = 1; //used for menu selections
;  105	    bool kill = false; //used to terminate program
;  106	    bool lol = false; //used to initialize graphx
	LD	(IX+-48),0
;  107	    bool lol2 = false; //used to plot points
	LD	(IX+-39),0
;  108	    bool lol3 = false; //used to draw the perspective changer
	LD	(IX+-24),0
;  109	    uint8_t mode = 0; //used for menu selections
;  110	    int i = 0;
;  111	    double t; //parameter for plotting points
;  112	    double a = -2.3; //yaw
	LD	BC,1258291
	LD	(IX+-4),BC
	LD	A,192
	LD	(IX+-1),A
;  113	    double b = .6; //roll
	LD	BC,1677722
	LD	(IX+-8),BC
	LD	A,63
	LD	(IX+-5),A
;  114	    double c = 0; //pitch; this never changes since i don't want people to mess with the rotation of the screen
	LD	BC,0
	LD	(IX+-12),BC
	XOR	A,A
	LD	(IX+-9),A
;  115	    double a1 = a; //dummy variables we'll use later
	LD	BC,1258291
	LD	(IX+-16),BC
	LD	A,192
	LD	(IX+-13),A
;  116	    double b1 = b;
	LD	BC,1677722
	LD	(IX+-20),BC
	LD	A,63
	LD	(IX+-17),A
;  117	    double c1 = c;
;  118	    double g; //g and h are used for calculating the points to plot
;  119	    double _g; //_g and _h are unused for now, keeping it as legacy in case i might need them someday
;  120	    double h;
;  121	    double _h;
;  122	    const double s = 15; //scale of the graph
;  123	    const double s2 = 3.75; //how much of the graph gets shown
;  124	    const double n = 10; //resolution of the grid of the graph is (higher = more detail)
;  125	    double dx = 1 / (n * (1 +
;  126	                          n)); //degree of precision when plotting; higher values mean less precise plotting. This value should be called dt to be mathematically correct, but I don't feel like changing it now
;  127	    double d1;
;  128	    double d2;
;  129	
;  130	    double aaa;
;  131	    uint8_t xxNodes[256][3]; //create the node arrays
;  132	    uint8_t xyNodes[256][3]; //why are they multidimensional? this is like 2am code so who knows
;  133	    uint8_t yxNodes[256][3];
;  134	    uint8_t yyNodes[256][3];
;  135	
;  136	
;  137	
;  138	    char tokens[] = " 5 6 2 * ^ ";
	LEA	DE,IX+-67
;  139	
;  140	    floatToStr(parseRPN(tokens));
	PEA	IX+-67
	LD	HL,_0temp0
	LD	BC,12
	LDIR	
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_parseRPN
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floatToStr
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  141	
;  142	
;  143	
;  144	
;  145	
;  146	    //------program actually starts here------\\
;  147	
;  148	    prgm_CleanUp(); //clear the screen
;  149	
;  150	    gfx_Begin(gfx_8bpp); //initialize advanced graphx
	LD	BC,39
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Begin
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  151	    gfx_SetDraw(gfx_buffer);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetDraw
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  152	
;  153	    gfx_SetTextFGColor(gfx_black);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetTextFGColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  154	    gfx_PrintStringXY("R3 - 3D grapher for the TI84PCE", 12, 12); //print title text
	LD	BC,12
	PUSH	BC
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  155	  //  gfx_PrintStringXY(title2, 12, 21);
;  156	
;  157	    gfx_PrintStringXY(text, 12, 30);
	LD	BC,30
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,_text
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
;  158	
;  159	    gfx_SwapDraw(); //update the screen
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  160	
;  161	    while (!os_GetCSC()); //wait for input
L_2:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetCSC
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	OR	A,A
	JR	Z,L_2
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
;  162	
;  163	    prgm_CleanUp(); //clear the screen
	CALL	_prgm_CleanUp
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  164	
;  165	    /* Loop until 2nd is pressed */
;  166	/*    do 
;  167	    {
;  168		kb_Scan();
;  169		// Load all keyboard registers 
;  170		key1 = kb_Data[kb_group_1];
;  171		key2 = kb_Data[kb_group_2];
;  172		key3 = kb_Data[kb_group_3];
;  173		key4 = kb_Data[kb_group_4];
;  174		key5 = kb_Data[kb_group_5];
;  175		key6 = kb_Data[kb_group_6];
;  176	        key7 = kb_Data[kb_group_7];
;  177	
;  178		
;  179	    } 
;  180	    while( kb_Data[kb_group_1] != kb_2nd );*/
;  181	
;  182	    do
L_28:
;  183	    {
;  184	        //THIS IS WHERE THE FUN BEGINS
;  185	        if (!lol)
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_5
;  186	        {
;  187	            i = 0;
;  188	            //the stuff here will only happen the first time this loop is run
;  189	            gfx_FillScreen(gfx_white); //fill the screen with white
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillScreen
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  190	            gfx_PrintStringXY(graph, 320 - gfx_GetStringWidth(graph), 230);
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  191	            gfx_BlitRectangle(gfx_buffer, 320 - gfx_GetStringWidth(graph), 230, gfx_GetStringWidth(graph), 10);
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_BlitRectangle
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  192	            lol = true; //make sure these aren't run again
	LD	(IX+-48),1
;  193	        }
L_5:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
;  194	        kb_Scan(); //scan the keyboard for inputs
	CALL	_kb_Scan
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  195	        key7 = kb_Data[kb_group_7]; //load the group 7 registers
	LD	A,(16056350)
	LD	(IX+-49),A
;  196	        gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  197	        switch (key7)
	LD	A,(IX+-49)
	UEXT	HL
	LD	L,A
	LD	BC,HL
L__5:
	LD	DE,8
	OR	A,A
	SBC	HL,DE
	JR	Z,L_6
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	JR	C,L_11
	LD	DE,1
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	JR	C,L_11
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	JR	C,L_11
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,L__4-3
	ADD	HL,BC
	LD	HL,(HL)
	JP	(HL)
L__4:
	DW24	L_7	

	DW24	L_8	

	DW24	L_11	

	DW24	L_9	

;  198	        {
;  199	            //this is for controlling perspective, but the ez80 is a crappy 48mHz cpu and can't do this in real time
;  200	            //(well it can, but it has to redraw the function every freakin' time)
;  201	            case kb_Up:
L_6:
;  202	                //	gfx_FillScreen( gfx_white); //every time this happens, we want to clear the screen before drawing stuff again
;  203	                gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  204	                gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  205	                b1 += .15;
	LD	BC,(IX+-20)
	LD	A,(IX+-17)
	LD	HL,1677722
	LD	E,62
	CALL	__fadd
	LD	(IX+-20),BC
	LD	(IX+-17),A
;  206	                lol3 = false; //this is so that it redraws the function
	LD	(IX+-24),0
;  207	                break;
	JR	L_11
;  208	            case kb_Down:
L_7:
;  209	                gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  210	                gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  211	                b1 -= .15;
	LD	BC,(IX+-20)
	LD	A,(IX+-17)
	LD	HL,1677722
	LD	E,62
	CALL	__fsub
	LD	(IX+-20),BC
	LD	(IX+-17),A
;  212	                lol3 = false; //i honestly should name my variables more intuitively so you can actually understand what they do
	LD	(IX+-24),0
;  213	                break;
	JR	L_11
;  214	            case kb_Left:
L_8:
;  215	                gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  216	                gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  217	                a1 += .15;
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	LD	HL,1677722
	LD	E,62
	CALL	__fadd
	LD	(IX+-16),BC
	LD	(IX+-13),A
;  218	                lol3 = false;
	LD	(IX+-24),0
;  219	                break;
	JR	L_11
;  220	            case kb_Right:
L_9:
;  221	                gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  222	                gfx_FillRectangle(320 - 64, 0, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  223	                a1 -= .15;
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	LD	HL,1677722
	LD	E,62
	CALL	__fsub
	LD	(IX+-16),BC
	LD	(IX+-13),A
;  224	                lol3 = false;
	LD	(IX+-24),0
;  225	                break;
;  226	            default:
;  227	                break;
;  228	        }
L_11:
;  229	        //The perspective box
;  230	        //This is my solution to controlling perspective, since we can't rotate in real time
;  231	        //rotate the preview axes to desired position and press enter, and the function will redraw itself
;  232	        gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  233	        gfx_VertLine_NoClip(320 - 64, 0, 64); //borders for box
	LD	BC,64
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_VertLine_NoClip
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  234	        gfx_HorizLine_NoClip(320 - 64, 64, 64);
	LD	BC,64
	PUSH	BC
	PUSH	BC
	LD	BC,256
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_HorizLine_NoClip
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  235	        //x-axis
;  236	        gfx_Line_NoClip(288 - (x_x(a1, b1, c1) * 24), 32 + (x_y(a1, b1, c1) * 24), (int) (288 + (x_x(a1, b1, c1) * 24)),
;  237	                        (int) (32 - (x_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  238	        gfx_PrintStringXY("x", (int) (288 + (x_x(a1, b1, c1) * 25)), (int) (32 - (x_y(a1, b1, c1) * 25))); //axis labels
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  239	        //y-axis
;  240	        gfx_Line_NoClip(288 - (y_x(a1, b1, c1) * 24), 32 + (y_y(a1, b1, c1) * 24), (int) (288 + (y_x(a1, b1, c1) * 24)),
;  241	                        (int) (32 - (y_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  242	        gfx_PrintStringXY("y", (int) (288 + (y_x(a1, b1, c1) * 25)), (int) (32 - (y_y(a1, b1, c1) * 25)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  243	        //z-axis
;  244	        gfx_Line_NoClip(288 - (z_x(a1, b1, c1) * 24), 32 + (z_y(a1, b1, c1) * 24), (int) (288 + (z_x(a1, b1, c1) * 24)),
;  245	                        (int) (32 - (z_y(a1, b1, c1) * 24)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,9437184
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  246	        gfx_PrintStringXY("z", (int) (288 + (z_x(a1, b1, c1) * 25)), (int) (32 - (z_y(a1, b1, c1) * 25)));
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,65
	CALL	__fmul
	LD	HL,9437184
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  247	        if (!lol3)
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_14
;  248	        {
;  249	            gfx_BlitRectangle(gfx_buffer, 320 - 64, 0, 64,
;  250	                              65); //blit the corner; take from the buffer and draw it on screen
	LD	BC,65
	PUSH	BC
	LD	BC,64
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,256
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_BlitRectangle
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  251	            lol3 = true; //we don't want this to keep running
	LD	(IX+-24),1
;  252	        }
L_14:
;  253	        if (kb_Data[kb_group_6] == kb_Enter)
	LD	A,(16056348)
	CP	A,1
	JR	NZ,L_27
;  254	        {
;  255	            gfx_PrintStringXY(graph, 320 - gfx_GetStringWidth(graph), 230);
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  256	            gfx_BlitRectangle(gfx_buffer, 320 - gfx_GetStringWidth(graph), 230, gfx_GetStringWidth(graph), 10);
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,230
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetStringWidth
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_BlitRectangle
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  257	            a = a1;
	LD	BC,(IX+-16)
	LD	A,(IX+-13)
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  258	            b = b1;
	LD	BC,(IX+-20)
	LD	A,(IX+-17)
	LD	(IX+-8),BC
	LD	(IX+-5),A
;  259	            c = c1;
	LD	BC,0
	LD	(IX+-12),BC
	XOR	A,A
	LD	(IX+-9),A
;  260	            lol2 = false;
	LD	(IX+-39),0
;  261	        }
L_27:
;  262	
;  263	
;  264	        if (!lol2)
	LD	A,(IX+-39)
	OR	A,A
	JR	NZ,L_29
;  265	        {
;  266	            //basically, this is the for-loop that controls graphing
;  267	            //initial condition: t=0
;  268	            //go until t is greater than one
;  269	            //add dx to t each time
;  270	            gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillScreen
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  271	            gfx_SetColor(gfx_black); //we want to draw in black
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  272	            //x-axis
;  273	            //apparently the _NoClip functions are faster than their clipped counterparts
;  274	            gfx_Line_NoClip(160 - (x_x(a, b, c) * 100), 120 + (x_y(a, b, c) * 100), (int) (160 + (x_x(a, b, c) * 100)),
;  275	                            (int) (120 - (x_y(a, b, c) *
;  276	                                          100))); //we're casting doubles to ints here, but i think that is redundant since gfx_Line converts doubles automatically
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  277	            gfx_PrintStringXY("x", (int) (160 + (x_x(a, b, c) * 100)),
;  278	                              (int) (120 - (x_y(a, b, c) * 100))); //axis labels
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  279	            //y-axis
;  280	            gfx_Line_NoClip(160 - (y_x(a, b, c) * 100), 120 + (y_y(a, b, c) * 100), (int) (160 + (y_x(a, b, c) * 100)),
;  281	                            (int) (120 - (y_y(a, b, c) *
;  282	                                          100))); //btw (160,120) is the center of the screen, counting from the top left corner as (0,0)
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  283	            gfx_PrintStringXY("y", (int) (160 + (y_x(a, b, c) * 100)), (int) (120 - (y_y(a, b, c) * 100)));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  284	            //z-axis
;  285	            gfx_Line_NoClip(160 - (z_x(a, b, c) * 100), 120 + (z_y(a, b, c) * 100), (int) (160 + (z_x(a, b, c) * 100)),
;  286	                            (int) (120 - (z_y(a, b, c) * 100))); //the resolution of the TI84+CE is 320*240
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,15728640
	LD	E,66
	CALL	__fadd
	CALL	__ftol
	LD	B,0
	PUSH	BC
	LD	C,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,2097152
	LD	A,67
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line_NoClip
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  287	            gfx_PrintStringXY("z", (int) (160 + (z_x(a, b, c) * 100)), (int) (120 - (z_y(a, b, c) * 100)));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	PUSH	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,13107200
	LD	E,66
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	PUSH	BC
	LD	BC,L__18
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  288	            i = 0;
	LD	BC,0
	LD	(IX+-23),BC
;  289	            for (t = 0; t <= 1 && kb_Data[kb_group_1] != kb_2nd; t += dx)
	LD	(IX+-47),BC
	XOR	A,A
	LD	(IX+-44),A
	JR	L_24
L_22:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
;  290	            {
;  291	                kb_Scan(); //keep scanning for key presses
	CALL	_kb_Scan
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  292	                gfx_SetColor(gfx_green); //we want to graph in green
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  293	                //equations for the grid/graph
;  294	                g = 2 * s2 * ((floor(t * (n + 1)) / n) - .5);
	LD	BC,(IX+-47)
	LD	A,(IX+-44)
	LD	HL,3145728
	LD	E,65
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,2097152
	LD	E,65
	CALL	__fdiv
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-31),BC
	LD	(IX+-28),A
;  295	                //	_g = 2*s2*((floor((t+dx)*(n+1))/n)-.5); //unused for now
;  296	                h = 2 * s2 * (mod(t * (n + 1), 1) - .5);
	LD	C,63
	LD	B,0
	PUSH	BC
	LD	HL,3145728
	LD	E,65
	LD	BC,8388608
	PUSH	BC
	LD	BC,(IX+-47)
	LD	A,(IX+-44)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_mod
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	LD	E,63
	CALL	__fsub
	LD	HL,15728640
	LD	E,64
	CALL	__fmul
	LD	(IX+-35),BC
	LD	(IX+-32),A
;  297	                //	_h = 2*s2*(mod((t+dx)*(n+1),1)-.5); //unused for now
;  298	                xxNodes[i][0] = (uint8_t)(160 + (s * ((x_x(a, b, c) * g) + (y_x(a, b, c) * h) +
;  299	                                                      (z_x(a, b, c) * function(g, h))))); //fill out the arrays of nodes
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	E,(IX+-28)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-3240	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	E,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3241	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-35)
	LD	E,(IX+-32)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3240	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	LD	IY,-3241	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	LD	A,E
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-3236	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	E,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3237	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-32)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	LD	C,(IX+-28)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	PUSH	BC
	LD	BC,-3233	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3245
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_function
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3245
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3233	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3236	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	LD	IY,-3237	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	LD	A,E
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	LD	HL,(IX+-23)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-23)
	SBC	HL,DE
	LD	DE,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-3227	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-3139
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3230	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3227	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-3227	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3230	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3227	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),C
;  300	                xyNodes[i][0] = (uint8_t)(
;  301	                        120 - (s * ((x_y(a, b, c) * g) + (y_y(a, b, c) * h) + (z_y(a, b, c) * function(g, h)))));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	E,(IX+-28)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-3223	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	E,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3224	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-35)
	LD	E,(IX+-32)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3223	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	LD	IY,-3224	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	LD	A,E
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-3219	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	E,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3220	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-32)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	LD	C,(IX+-28)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	PUSH	BC
	LD	BC,-3216	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3245
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_function
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3245
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3216	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3219	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	LD	IY,-3220	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	LD	A,E
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	HL,(IX+-23)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-23)
	SBC	HL,DE
	LD	DE,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-3210	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-835
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3213	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3210	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-3210	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3213	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3210	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),C
;  302	                yxNodes[i][0] = (uint8_t)(
;  303	                        160 + (s * ((x_x(a, b, c) * h) + (y_x(a, b, c) * g) + (z_x(a, b, c) * function(h, g)))));
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-35)
	LD	E,(IX+-32)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-3206	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	E,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3207	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	E,(IX+-28)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3206	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	LD	IY,-3207	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	LD	A,E
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-3202	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	E,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3203	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_x
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-28)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	LD	C,(IX+-32)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	PUSH	BC
	LD	BC,-3199	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3245
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_function
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3245
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3199	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3202	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	LD	IY,-3203	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	LD	A,E
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	HL,2097152
	LD	E,67
	CALL	__fadd
	CALL	__ftol
	LD	HL,(IX+-23)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-23)
	SBC	HL,DE
	LD	DE,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-3193	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-1603
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3196	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3193	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-3193	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3196	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3193	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),C
;  304	                yyNodes[i][0] = (uint8_t)(
;  305	                        120 - (s * ((x_y(a, b, c) * h) + (y_y(a, b, c) * g) + (z_y(a, b, c) * function(h, g)))));
	LD	HL,(IX+-23)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-23)
	SBC	HL,BC
	LD	(IX+-38),HL
	LD	(IX+-55),HL
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_x_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-35)
	LD	E,(IX+-32)
	CALL	__fmul
	LD	HL,BC
	PUSH	BC
	LD	BC,-3189	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	E,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3190	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_y_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	E,(IX+-28)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3189	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	LD	IY,-3190	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	LD	A,E
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,BC
	PUSH	BC
	LD	BC,-3184	; spill
	CALL	__istix
	POP	BC
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	E,A
	PUSH	IY
	PUSH	BC
	LD	IY,-3186	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	POP	BC
	POP	IY
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_z_y
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,(IX+-28)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	LD	C,(IX+-32)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	PUSH	BC
	LD	BC,-3181	; spill
	CALL	__istix
	POP	BC
	LD	A,E
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3245
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_function
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3245
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3181	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	PUSH	BC
	LD	BC,-3178	; spill
	CALL	__istix
	LD	BC,-3184	; unspill
	CALL	__ildix
	POP	BC
	LD	BC,HL
	PUSH	BC
	LD	BC,-3178	; unspill
	CALL	__ildix
	POP	BC
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; spill
	LD	BC,IX	; spill
	ADD	IY,BC
	LD	(IY),E
	LD	IY,-3186	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	LD	A,E
	PUSH	IY
	PUSH	BC
	LD	IY,-3185	; unspill
	LD	BC,IX	; unspill
	ADD	IY,BC
	LD	E,(IY)
	POP	BC
	POP	IY
	CALL	__fadd
	LD	HL,7340032
	LD	E,65
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,15728640
	LD	A,66
	CALL	__fsub
	CALL	__ftol
	LD	HL,IX
	LD	DE,-2371
	ADD	HL,DE
	LD	DE,(IX+-38)
	ADD	HL,DE
	LD	(HL),C
;  306	
;  307	//			xxNodes[i][1]=(uint8_t)(160+(s*((x_x(a+.15,b,c)*g) + (y_x(a+.15,b,c)*h) + (z_x(a+.15,b,c)*function(g,h)))));  //what was i thinking here
;  308	//			xyNodes[i][1]=(uint8_t)(120-(s*((x_y(a+.15,b,c)*g) + (y_y(a+.15,b,c)*h) + (z_y(a+.15,b,c)*function(g,h)))));  //ignore this pls
;  309	//			yxNodes[i][1]=(uint8_t)(160+(s*((x_x(a+.15,b,c)*h) + (y_x(a+.15,b,c)*g) + (z_x(a+.15,b,c)*function(h,g)))));
;  310	//			yyNodes[i][1]=(uint8_t)(120-(s*((x_y(a+.15,b,c)*h) + (y_y(a+.15,b,c)*g) + (z_y(a+.15,b,c)*function(h,g)))));
;  311	
;  312	//			xxNodes[i][2]=(uint8_t)(160+(s*((x_x(a-.15,b,c)*g) + (y_x(a-.15,b,c)*h) + (z_x(a-.15,b,c)*function(g,h)))));
;  313	//			xyNodes[i][2]=(uint8_t)(120-(s*((x_y(a-.15,b,c)*g) + (y_y(a-.15,b,c)*h) + (z_y(a-.15,b,c)*function(g,h)))));
;  314	//			yxNodes[i][2]=(uint8_t)(160+(s*((x_x(a-.15,b,c)*h) + (y_x(a-.15,b,c)*g) + (z_x(a-.15,b,c)*function(h,g)))));
;  315	//			yyNodes[i][2]=(uint8_t)(120-(s*((x_y(a-.15,b,c)*h) + (y_y(a-.15,b,c)*g) + (z_y(a-.15,b,c)*function(h,g)))));
;  316	
;  317	                if (i >= 12) //for some reason the first 12 nodes don't connect to the rest, so we omit them
	LD	HL,(IX+-23)
	OR	A,A
	LD	BC,12
	SBC	HL,BC
	JP	M,L_21
;  318	                {
;  319	                    if ((i - 1) % (int) (n) != 0)
	LD	BC,(IX+-23)
	DEC	BC
	LD	(IX+-42),BC
	LD	(IX+-52),BC
	LD	HL,BC
	LD	BC,10
	CALL	__irems
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	NZ,L__21
	LD	A,1
	JR	L__22
L__21:
	XOR	A,A
L__22:
	LD	(IX+-43),A
	OR	A,A
	JR	NZ,L_17
;  320	                    { //if the distance is less than 45 (or some arbitrary constant)
;  321	                        gfx_Line(xxNodes[i - 1][0], xyNodes[i - 1][0], xxNodes[i][0],
;  322	                                 xyNodes[i][0]); //connect the nodes
	LD	BC,(IX+-38)
	LD	(IX+-55),BC
	LD	BC,(IX+-42)
	LD	(IX+-52),BC
	LD	HL,(IX+-42)
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-42)
	SBC	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-835
	ADD	HL,DE
	LD	DE,(IX+-38)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	DE,-3139
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,DE
	LD	DE,(IX+-38)
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	DE,-835
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-3172	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,BC
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-3175	; spill
	CALL	__istix
	POP	HL
	LD	BC,-3172	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,DE
	PUSH	BC
	LD	BC,-3175	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	DE,-3139
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,DE
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  323	                    }
L_17:
;  324	                    gfx_SetColor(gfx_blue); //we want graph in blue
	LD	BC,16
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  325	                    if ((i - 1) % (int) (n) != 0)
	LD	A,(IX+-43)
	OR	A,A
	JR	NZ,L_21
;  326	                    { //do the same thing
;  327	                        gfx_Line(yxNodes[i - 1][0], yyNodes[i - 1][0], yxNodes[i][0], yyNodes[i][0]);
	LD	BC,(IX+-52)
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	DE,HL
	LD	HL,IX
	LD	BC,(IX+-55)
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3142	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-2371
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3145	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3142	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3142	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3145	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-3142	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3148	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3151	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3148	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3148	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3151	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-3148	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	A,(HL)
	UEXT	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3154	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1603
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3157	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3154	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3160	; spill
	CALL	__istix
	POP	HL
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3163	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3160	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	LD	L,A
	PUSH	HL
	LD	HL,IX
	LD	BC,-3157	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-3163	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	BC,-2371
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-3166	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,DE
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-3169	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-3166	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,BC
	LD	BC,-3169	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	BC,-1603
	LD	L,A
	PUSH	HL
	LD	HL,IX
	ADD	HL,BC
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Line
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  328	                    }
;  329	                }
L_21:
;  330	                i++; //increment i
	LD	BC,(IX+-23)
	INC	BC
	LD	(IX+-23),BC
	LD	BC,(IX+-47)
	LD	A,(IX+-44)
	LD	HL,1372681
	LD	E,60
	CALL	__fadd
	LD	(IX+-47),BC
	LD	(IX+-44),A
;  331	
;  332	                //really inefficient pixel plotter. slow af
;  333	                //use this at your own risk
;  334	                //	gfx_SetPixel( 160 + (s*((x_x(a,b,c)*g)+(y_x(a,b,c)*h)+(z_x(a,b,c)*function(g,h)))) ,   120-(s*((x_y(a,b,c)*g) + (y_y(a,b,c)*h) + (z_y(a,b,c)*function(g,h)))));
;  335	                //	gfx_SetColor(gfx_blue);
;  336	                //	gfx_SetPixel(160+(s*((x_x(a,b,c)*h)+(y_x(a,b,c)*g)+(z_x(a,b,c)*function(h,g)))),120-(s*((x_y(a,b,c)*h) + (y_y(a,b,c)*g) + (z_y(a,b,c)*function(h,g)))));
;  337	
;  338	            }
L_24:
	LD	HL,8388608
	LD	E,63
	LD	BC,(IX+-47)
	LD	A,(IX+-44)
	CALL	__fcmp
	JP	M,L_25
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_22
L_25:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-3244
	CALL	__istix
	POP	HL
	POP	BC
;  339	            gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	PUSH	BC
	LD	BC,-3244
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  340	            lol2 = true; // this is so that it only plots the function once
	LD	(IX+-39),1
;  341	            lol3 = false;
	LD	(IX+-24),0
;  342	        }
;  343	
;  344	    } while (kb_Data[kb_group_1] != kb_2nd);
L_29:
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_28
;  345	    gfx_End(); //stop the gfx
	CALL	_gfx_End
;  346	    prgm_CleanUp(); //clear the screen
	CALL	_prgm_CleanUp
;  347	    //end of program
;  348	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_Line                           IMPORT  -----   function
;_function                           IMPORT  -----   function
;_mod                                IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_z_x                                IMPORT  -----   function
;_z_y                                IMPORT  -----   function
;_y_x                                IMPORT  -----   function
;_y_y                                IMPORT  -----   function
;_x_x                                IMPORT  -----   function
;_x_y                                IMPORT  -----   function
;_gfx_Line_NoClip                    IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_VertLine_NoClip                IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_BlitRectangle                  IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_prgm_CleanUp                       IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_text                               STATIC     15   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_parseRPN                           IMPORT  -----   function
;_floatToStr                         IMPORT  -----   function
;_0temp0                             STATIC     12   variable
;xxNodes                            IX-3139    768   variable
;yyNodes                            IX-2371    768   variable
;yxNodes                            IX-1603    768   variable
;xyNodes                             IX-835    768   variable
;tokens                               IX-67     12   variable
;G_3                                  IX-55      3   variable
;G_4                                  IX-52      3   variable
;key7                                 IX-49      1   variable
;lol                                  IX-48      1   variable
;t                                    IX-47      4   variable
;G_2                                  IX-43      1   variable
;G_1                                  IX-42      3   variable
;lol2                                 IX-39      1   variable
;G_0                                  IX-38      3   variable
;h                                    IX-35      4   variable
;g                                    IX-31      4   variable
;graph                                IX-27      3   variable
;lol3                                 IX-24      1   variable
;i                                    IX-23      3   variable
;b1                                   IX-20      4   variable
;a1                                   IX-16      4   variable
;c                                    IX-12      4   variable
;b                                     IX-8      4   variable
;a                                     IX-4      4   variable


; Stack Frame Size: 3251 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__0:
	DB	"Graphing..."
	DB	0
L__1:
	DB	"R3 - 3D grapher for the TI84PCE"
	DB	0
L__10:
	DB	"x"
	DB	0
L__11:
	DB	"y"
	DB	0
L__12:
	DB	"z"
	DB	0
L__16:
	DB	"x"
	DB	0
L__17:
	DB	"y"
	DB	0
L__18:
	DB	"z"
	DB	0
	SEGMENT TEXT
_0temp0:
	DB	32
	DB	53
	DB	32
	DB	54
	DB	32
	DB	50
	DB	32
	DB	42
	DB	32
	DB	94
	DB	32
	DB	0
	SEGMENT CODE
;  349	
;  350	//function that prints simple text on screen
;  351	//similar to the Output() function of TI-BASIC
;  352	void printText(const char *text, uint8_t xpos, uint8_t ypos)
;  353	{
_printText:
	CALL	__frameset0
;  354	    os_SetCursorPos(ypos, xpos); //set the place to start putting text
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;  355	    os_PutStrFull(text); //output the string
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;  356	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  357	
;  358	/* Simple way to fill the screen with a given color */
;  359	void fillScreen(uint8_t color)
;  360	{
_fillScreen:
	CALL	__frameset0
;  361	    memset_fast(lcd_Ram, color, LCD_SIZE);
	LD	BC,153600
	PUSH	BC
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,13893632
	PUSH	BC
	CALL	_memset_fast
	POP	BC
	POP	BC
	POP	BC
;  362	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fillScreen ***************************
;Name                         Addr/Register   Size   Type
;_memset_fast                        IMPORT  -----   function
;color                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  363	
;  364	//used to calculate the position of points in the 3d world and translate them into 2d coordinates to draw onto the screen
;  365	//when using these, ALWAYS type (a,b,c) as the arguments of the function.
;  366	double x_x(double a, double b, double c)
;  367	{
_x_x:
	LD	HL,-11
	CALL	__frameset
;  368	    return (cos(c) * cos(a)) - (sin(c) * sin(a) * sin(b));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-4),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-1),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-7)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-1)
	LD	HL,BC
	LD	BC,(IX+-4)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  369	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _x_x ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: 0 (instruction)


;  370	
;  371	double x_y(double a, double b, double c)
;  372	{
_x_y:
	LD	HL,-11
	CALL	__frameset
;  373	    return (cos(c) * sin(a) * sin(b)) + (sin(c) * cos(a));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fadd
	LD	E,A
	LD	HL,BC
;  374	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _x_y ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: 0 (instruction)


;  375	
;  376	double y_x(double a, double b, double c)
;  377	{
_y_x:
	LD	HL,-14
	CALL	__frameset
;  378	    return (-1 * cos(c) * sin(a)) - (sin(c) * cos(a) * sin(b));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	B,A
	LD	(IX+-13),BC
	CALL	_sin
	LD	BC,(IX+-13)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-13),BC
	LD	(IX+-14),A
	CALL	_cos
	LD	BC,(IX+-13)
	LD	A,(IX+-14)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-10),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-13),BC
	CALL	_sin
	LD	BC,(IX+-13)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-10)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  379	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _y_x ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: 0 (instruction)


;  380	
;  381	double y_y(double a, double b, double c)
;  382	{
_y_y:
	LD	HL,-11
	CALL	__frameset
;  383	    return (cos(c) * cos(a) * sin(b)) - (sin(c) * sin(a));
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_cos
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-10),BC
	CALL	_sin
	LD	BC,(IX+-10)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	(IX+-7),BC
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	LD	(IX+-4),A
	CALL	_sin
	POP	BC
	POP	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-10),BC
	LD	(IX+-11),A
	CALL	_sin
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-4)
	LD	HL,BC
	LD	BC,(IX+-7)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  384	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _y_y ***************************
;Name                         Addr/Register   Size   Type
;_sin                                IMPORT  -----   function
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: 0 (instruction)


;  385	
;  386	double z_x(double a, double b, double c)
;  387	{
_z_x:
	LD	HL,-6
	CALL	__frameset
;  388	    return -1 * sin(c) * cos(b);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_sin
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+-3),BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	B,A
	LD	(IX+-6),BC
	CALL	_cos
	LD	BC,(IX+-6)
	POP	IY
	POP	IY
	LD	A,B
	LD	BC,(IX+-3)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
;  389	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _z_x ***************************
;Name                         Addr/Register   Size   Type
;_cos                                IMPORT  -----   function
;_sin                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


;  390	
;  391	double z_y(double a, double b, double c)
;  392	{
_z_y:
	LD	HL,-4
	CALL	__frameset
;  393	    return cos(c) * cos(b);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+18)
	PUSH	BC
	CALL	_cos
	POP	BC
	POP	BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,HL
	LD	A,E
	LD	(IX+-3),BC
	LD	(IX+-4),A
	CALL	_cos
	LD	BC,(IX+-3)
	LD	A,(IX+-4)
	POP	IY
	POP	IY
	CALL	__fmul
	LD	E,A
	LD	HL,BC
;  394	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _z_y ***************************
;Name                         Addr/Register   Size   Type
;_cos                                IMPORT  -----   function
;c                                    IX+18      4   parameter
;b                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: 0 (instruction)


;  395	
;  396	//the 3d function you want to graph
;  397	//note that this is in the format f(x,y)=
;  398	//for example: for f(x,y)=cos(xy)-y^2, type in
;  399	//	return cos(x*y)-(pow(y,2));
;  400	//soon i should have user input
;  401	double function(double x, double y)
;  402	{
_function:
	LD	HL,-4
	CALL	__frameset
;  403	    return .25 * x * x - .25 * y * y;
	LD	HL,8388608
	LD	E,62
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fmul
	LD	(IX+-4),BC
	LD	(IX+-1),A
	LD	A,(IX+15)
	LD	BC,(IX+12)
	LD	HL,8388608
	LD	E,62
	CALL	__fmul
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	A,(IX+-1)
	LD	HL,BC
	LD	BC,(IX+-4)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  404	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _function ***************************
;Name                         Addr/Register   Size   Type
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


;  405	
;  406	//proper modulus function
;  407	//the % operator only works with integers
;  408	//and the fmod() function can't handle negative numbers properly
;  409	double mod(double a, double N)
;  410	{
_mod:
	CALL	__frameset0
;  411	    return a - N * floor(a / N);
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
;  412	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mod ***************************
;Name                         Addr/Register   Size   Type
;_floor                              IMPORT  -----   function
;N                                    IX+12      4   parameter
;a                                     IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  413	
;  414	char *tokenize(char *input)
;  415	{
_tokenize:
	LD	HL,-3
	CALL	__frameset
;  416	    int i = 0;
;  417	    char *output;
;  418	    output = strtok(input, ",");
	LD	BC,L__39
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;  419	    return output;
;  420	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _tokenize ***************************
;Name                         Addr/Register   Size   Type
;_strtok                             IMPORT  -----   function
;output                                IX-3      3   variable
;input                                 IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__39:
	DB	","
	DB	0
	SEGMENT CODE
;  421	char *floatToStr(float arg)
;  422	{
_floatToStr:
	LD	HL,-18
	CALL	__frameset
;  423	    const real_t arg2 = os_FloatToReal(arg);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PEA	IX+-18
	CALL	_os_FloatToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-9
;  424	    os_RealToStr(text, &arg2, -1, 1, -1);
	LD	BC,16777215
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	PEA	IX+-9
	LD	BC,_text
	PUSH	BC
	LD	BC,9
	LDIR	
	CALL	_os_RealToStr
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  425	    return text;
	LD	HL,_text
;  426	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _floatToStr ***************************
;Name                         Addr/Register   Size   Type
;_text                               STATIC     15   variable
;_os_RealToStr                       IMPORT  -----   function
;_os_FloatToReal                     IMPORT  -----   function
;arg2                                  IX-9      9   variable
;arg                                   IX+6      4   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


;  427	void initRPN()
;  428	{
_initRPN:
;  429	    RPN.size = 0;
	LD	BC,0
	LD	(_RPN+96),BC
;  430	}
	RET	


;**************************** _initRPN ***************************
;Name                         Addr/Register   Size   Type
;_RPN                                STATIC     99   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  431	void pushRPN(double val)
;  432	{
_pushRPN:
	CALL	__frameset0
;  433	    RPN.val[RPN.size++] = val;
	LD	HL,(_RPN+96)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_RPN
	ADD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	LD	BC,(_RPN+96)
	INC	BC
	LD	(_RPN+96),BC
;  434	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pushRPN ***************************
;Name                         Addr/Register   Size   Type
;_RPN                                STATIC     99   variable
;val                                   IX+6      4   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;  435	
;  436	double popRPN()
;  437	{
_popRPN:
;  438	    return RPN.val[--RPN.size];
	LD	BC,(_RPN+96)
	DEC	BC
	LD	(_RPN+96),BC
	LD	HL,(_RPN+96)
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,_RPN
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IY)
	LD	E,(IY+3)
;  439	}
	RET	


;**************************** _popRPN ***************************
;Name                         Addr/Register   Size   Type
;_RPN                                STATIC     99   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  440	double parseRPN(char *s)
;  441	{
_parseRPN:
	LD	HL,-14
	CALL	__frameset
;  442	    double a, b;
;  443	    int i;
;  444	    char *e, *w = " \t\n\r\f";
	LD	BC,L__45
	LD	(IX+-11),BC
;  445	
;  446	    for (s = strtok(s, w); s; s = strtok(0, w)) {
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(IX+6),HL
	JR	L_61
L_59:
;  447	        a = strtod(s, &e);
	PEA	IX+-14
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strtod
	POP	BC
	POP	BC
	LD	(IX+-4),HL
	LD	(IX+-1),E
;  448	        if (e > s)	pushRPN(a);
	LD	BC,(IX+-14)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_58
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_pushRPN
	POP	BC
	POP	BC
;  449	#define binop(x) b = popRPN(), a = popRPN(), pushRPN(x)
;  450	        else if (*s == '+')	binop(a + b);
	JR	L_60
L_58:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,43
	SBC	HL,BC
	JR	NZ,L_56
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-4),BC
	LD	(IX+-1),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	A,(IX+-1)
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  451	        else if (*s == '-')	binop(a - b);
	JR	L_60
L_56:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,45
	SBC	HL,BC
	JR	NZ,L_54
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-4),BC
	LD	(IX+-1),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	A,(IX+-1)
	CALL	__fsub
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  452	        else if (*s == '*')	binop(a * b);
	JR	L_60
L_54:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,42
	SBC	HL,BC
	JR	NZ,L_52
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-4),BC
	LD	(IX+-1),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  453	        else if (*s == '/')	binop(a / b);
	JR	L_60
L_52:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JR	NZ,L_50
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	BC,HL
	LD	(IX+-4),BC
	LD	(IX+-1),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	A,(IX+-1)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pushRPN
	POP	BC
	POP	BC
;  454	        else if (*s == '^')	binop(pow(a, b));
	JR	L_60
L_50:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,94
	SBC	HL,BC
	JR	NZ,L_60
	CALL	_popRPN
	LD	(IX+-8),HL
	LD	(IX+-5),E
	CALL	_popRPN
	LD	(IX+-4),HL
	LD	(IX+-1),E
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_pow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_pushRPN
	POP	BC
	POP	BC
;  455	#undef binop
;  456	    }
L_60:
	LD	BC,(IX+-11)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_strtok
	POP	BC
	POP	BC
	LD	(IX+6),HL
L_61:
	LD	BC,0
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_59
;  457	
;  458	    return popRPN();
	CALL	_popRPN
;  459	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _parseRPN ***************************
;Name                         Addr/Register   Size   Type
;_pow                                IMPORT  -----   function
;_popRPN                             IMPORT  -----   function
;_pushRPN                            IMPORT  -----   function
;_strtod                             IMPORT  -----   function
;_strtok                             IMPORT  -----   function
;e                                    IX-14      3   variable
;w                                    IX-11      3   variable
;b                                     IX-8      4   variable
;a                                     IX-4      4   variable
;s                                     IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__45:
	DB	" "
	DB	9,10,13,12,0
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_BlitRectangle:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine_NoClip:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_Line_NoClip:ROM
	XREF _gfx_Line:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _kb_Scan:ROM
	XREF _strtok:ROM
	XREF _strtod:ROM
	XREF _floor:ROM
	XREF _pow:ROM
	XREF _sin:ROM
	XREF _cos:ROM
	XREF _os_GetCSC:ROM
	XREF _os_RealToStr:ROM
	XREF _os_FloatToReal:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF _memset_fast:ROM
	XREF _prgm_CleanUp:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XDEF _parseRPN
	XDEF _popRPN
	XDEF _pushRPN
	XDEF _initRPN
	XDEF _floatToStr
	XDEF _tokenize
	XDEF _mod
	XDEF _function
	XDEF _z_y
	XDEF _z_x
	XDEF _y_y
	XDEF _y_x
	XDEF _x_y
	XDEF _x_x
	XDEF _fillScreen
	XDEF _printText
	XDEF _main
	XDEF _RPN
	XDEF _bb
	XDEF _aa
	XDEF _r
	XDEF _text
	END
